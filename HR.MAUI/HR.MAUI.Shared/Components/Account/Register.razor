@page "/account/register"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager

@code {
    private RegisterModel registerModel = new();
    private string? statusMessage;
    private string? returnUrl;
    private List<ExternalLoginDto> externalLogins = new();

    protected override async Task OnInitializedAsync()
    {
        // Parse returnUrl from query string if present
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("returnUrl", out var returnUrlValue))
        {
            returnUrl = returnUrlValue;
        }
        else
        {
            returnUrl = "/";
        }
        externalLogins = await Http.GetFromJsonAsync<List<ExternalLoginDto>>("/api/account/externallogins") ?? new();
    }

    private async Task HandleRegister()
    {
        statusMessage = string.Empty;

        var context = new ValidationContext(registerModel);
        var results = new List<ValidationResult>();
        if (!Validator.TryValidateObject(registerModel, context, results, true))
        {
            statusMessage = string.Join(" ", results.Select(r => r.ErrorMessage));
            return;
        }
        var response = await Http.PostAsJsonAsync("/api/account/register", registerModel);
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/account/registerconfirmation?email=" + registerModel.Email);
        }
        else
        {
            statusMessage = await response.Content.ReadAsStringAsync();
        }
    }

    private void ExternalLogin(string provider)
    {
        // Compose the returnUrl to redirect back after external login
        var url = $"/account/externalLoginLink?provider={Uri.EscapeDataString(provider)}&returnUrl={Uri.EscapeDataString(returnUrl ?? "/")}";
        NavigationManager.NavigateTo(url, forceLoad: true);
    }

    public class RegisterModel
    {
        [Required]
        [StringLength(32, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 3)]
        [Display(Name = "Username")]
        public string Username { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = string.Empty;

        [Required]
        [Phone]
        [Display(Name = "Phone Number")]
        public string PhoneNo { get; set; } = string.Empty;

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
    public class ExternalLoginDto
    {
        public string Name { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
    }
}

<h1>Register</h1>
<div class="row">
    <div class="col-md-4">
        <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-floating mb-3">
                <InputText @bind-Value="registerModel.Username" class="form-control" autocomplete="username" aria-required="true" placeholder="username" />
                <label>Username</label>
                <ValidationMessage For="@(() => registerModel.Username)" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="registerModel.Email" class="form-control" autocomplete="email" aria-required="true" placeholder="name@example.com" />
                <label>Email</label>
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="registerModel.PhoneNo" class="form-control" autocomplete="tel" aria-required="true" placeholder="+0000000000" />
                <label>Phone Number</label>
                <ValidationMessage For="@(() => registerModel.PhoneNo)" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="registerModel.Password" class="form-control" type="password" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label>Password</label>
                <ValidationMessage For="@(() => registerModel.Password)" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="registerModel.ConfirmPassword" class="form-control" type="password" autocomplete="new-password" aria-required="true" placeholder="confirm password" />
                <label>Confirm Password</label>
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="alert alert-info mt-2">@statusMessage</div>
        }
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            @if (externalLogins.Count == 0)
            {
                <div>
                    <p>
                        There are no external authentication services configured.
                    </p>
                </div>
            }
            else
            {
                <div>
                    <p>
                        @foreach (var provider in externalLogins)
                        {
                            <button type="button" class="btn btn-primary me-2" @onclick="() => ExternalLogin(provider.Name)">
                                Log in using your @provider.DisplayName account
                            </button>
                        }
                    </p>
                </div>
            }
        </section>
    </div>
</div>