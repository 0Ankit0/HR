@page "/projects"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using global::HR.Models
@using System.Text.Json
@using System.Text
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 text-primary fw-bold mb-0">
                        <i class="bi bi-kanban me-2"></i>Project Management
                    </h1>
                    <p class="text-muted mb-0">Manage projects and team assignments</p>
                </div>
                <button class="btn btn-primary" @onclick="OpenCreateModal">
                    <i class="bi bi-plus-circle me-2"></i>Create Project
                </button>
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-primary bg-opacity-10 p-3 rounded">
                                <i class="bi bi-kanban text-primary fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@totalProjects</div>
                            <div class="text-muted small">Total Projects</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-success bg-opacity-10 p-3 rounded">
                                <i class="bi bi-play-circle text-success fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@activeProjects</div>
                            <div class="text-muted small">Active</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-warning bg-opacity-10 p-3 rounded">
                                <i class="bi bi-exclamation-triangle text-warning fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@overDueProjects</div>
                            <div class="text-muted small">Overdue</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-info bg-opacity-10 p-3 rounded">
                                <i class="bi bi-check-circle text-info fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@completedProjects</div>
                            <div class="text-muted small">Completed</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="row mb-3">
        <div class="col-md-3">
            <select class="form-select" value="@selectedStatus" onchange="@(async (ChangeEventArgs e) => { selectedStatus = e.Value?.ToString() ?? ""; await OnFilterChanged(); })">
                <option value="">All Statuses</option>
                <option value="Planning">Planning</option>
                <option value="Active">Active</option>
                <option value="On Hold">On Hold</option>
                <option value="Completed">Completed</option>
                <option value="Cancelled">Cancelled</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" value="@selectedPriority" onchange="@(async (ChangeEventArgs e) => { selectedPriority = e.Value?.ToString() ?? ""; await OnFilterChanged(); })">
                <option value="">All Priorities</option>
                <option value="Low">Low</option>
                <option value="Medium">Medium</option>
                <option value="High">High</option>
                <option value="Critical">Critical</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" value="@selectedManager" onchange="@(async (ChangeEventArgs e) => { selectedManager = e.Value?.ToString() ?? ""; await OnFilterChanged(); })">
                <option value="">All Managers</option>
                @foreach (var employee in employees)
                {
                    <option value="@employee.Employee_ID">@employee.FirstName @employee.LastName</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                    <i class="bi bi-search text-muted"></i>
                </span>
                <input type="text" class="form-control border-start-0" 
                       placeholder="Search projects..." 
                       @bind="searchQuery" @onkeyup="OnSearchChanged" />
            </div>
        </div>
    </div>

    <!-- Projects Table -->
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div class="mt-2 text-muted">Loading projects...</div>
                </div>
            }
            else if (projects.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th class="border-0 fw-semibold">Project</th>
                                <th class="border-0 fw-semibold">Manager</th>
                                <th class="border-0 fw-semibold">Status</th>
                                <th class="border-0 fw-semibold">Priority</th>
                                <th class="border-0 fw-semibold">Progress</th>
                                <th class="border-0 fw-semibold">Due Date</th>
                                <th class="border-0 fw-semibold text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var project in pagedProjects)
                            {
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="bg-primary bg-opacity-10 rounded p-2 me-3">
                                                <i class="bi bi-kanban text-primary"></i>
                                            </div>
                                            <div>
                                                <div class="fw-semibold">@project.ProjectName</div>
                                                <div class="text-muted small">@project.Description</div>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="bg-secondary bg-opacity-10 rounded-circle p-2 me-2">
                                                <i class="bi bi-person text-secondary"></i>
                                            </div>
                                            <div>
                                                <div class="fw-semibold">@project.ManagerName</div>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(project.Status) px-3 py-2">
                                            @project.Status
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge @GetPriorityBadgeClass(project.Priority) px-3 py-2">
                                            @project.Priority
                                        </span>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="progress me-2" style="width: 100px; height: 8px;">
                                                <div class="progress-bar bg-success" style="width: @project.Progress%"></div>
                                            </div>
                                            <span class="small">@project.Progress%</span>
                                        </div>
                                    </td>
                                    <td>
                                        <div>@project.EndDate?.ToString("MMM dd, yyyy")</div>
                                        @if (project.EndDate < DateTime.Now && project.Status != "Completed")
                                        {
                                            <div class="text-danger small">
                                                <i class="bi bi-exclamation-triangle me-1"></i>Overdue
                                            </div>
                                        }
                                    </td>
                                    <td class="text-end">
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-info" @onclick="() => ViewProject(project)">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            <button class="btn btn-outline-primary" @onclick="() => EditProject(project)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-outline-success" @onclick="() => ManageTeam(project)">
                                                <i class="bi bi-people"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="d-flex justify-content-between align-items-center p-3 border-top">
                    <div class="text-muted">
                        Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalItems) of @totalItems projects
                    </div>
                    <nav>
                        <ul class="pagination pagination-sm mb-0">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                            </li>
                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                            {
                                <li class="page-item @(currentPage == i ? "active" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                </li>
                            }
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                            </li>
                        </ul>
                    </nav>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <div class="text-muted">
                        <i class="bi bi-kanban fs-1 d-block mb-3"></i>
                        <h5>No projects found</h5>
                        <p>No projects match your current filters.</p>
                        <button class="btn btn-primary" @onclick="OpenCreateModal">
                            <i class="bi bi-plus-circle me-2"></i>Create First Project
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Create/Edit Modal -->
<div class="modal fade @(showModal ? "show d-block" : "")" tabindex="-1" style="@(showModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-kanban me-2"></i>
                    @(isEditMode ? "Edit Project" : "Create New Project")
                </h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="currentProject" OnValidSubmit="SaveProject">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label class="form-label">Project Name</label>
                                <InputText class="form-control" @bind-Value="currentProject.ProjectName" required />
                                <ValidationMessage For="@(() => currentProject.ProjectName)" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Project Manager</label>
                                <select class="form-select" @bind="currentProject.Manager_ID">
                                    <option value="">Select Manager</option>
                                    @foreach (var employee in employees)
                                    {
                                        <option value="@employee.Employee_ID">@employee.FirstName @employee.LastName</option>
                                    }
                                </select>
                                <ValidationMessage For="@(() => currentProject.Manager_ID)" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Status</label>
                                <select class="form-select" @bind="currentProject.Status">
                                    <option value="Planning">Planning</option>
                                    <option value="Active">Active</option>
                                    <option value="On Hold">On Hold</option>
                                    <option value="Completed">Completed</option>
                                    <option value="Cancelled">Cancelled</option>
                                </select>
                                <ValidationMessage For="@(() => currentProject.Status)" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Priority</label>
                                <select class="form-select" @bind="currentProject.Priority">
                                    <option value="Low">Low</option>
                                    <option value="Medium">Medium</option>
                                    <option value="High">High</option>
                                    <option value="Critical">Critical</option>
                                </select>
                                <ValidationMessage For="@(() => currentProject.Priority)" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Progress (%)</label>
                                <InputNumber class="form-control" @bind-Value="currentProject.Progress" min="0" max="100" />
                                <ValidationMessage For="@(() => currentProject.Progress)" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Start Date</label>
                                <InputDate class="form-control" @bind-Value="currentProject.StartDate" />
                                <ValidationMessage For="@(() => currentProject.StartDate)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">End Date</label>
                                <InputDate class="form-control" @bind-Value="currentProject.EndDate" />
                                <ValidationMessage For="@(() => currentProject.EndDate)" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Budget</label>
                                <InputNumber class="form-control" @bind-Value="currentProject.Budget" step="0.01" />
                                <ValidationMessage For="@(() => currentProject.Budget)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Actual Cost</label>
                                <InputNumber class="form-control" @bind-Value="currentProject.ActualCost" step="0.01" />
                                <ValidationMessage For="@(() => currentProject.ActualCost)" />
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <InputTextArea class="form-control" rows="3" @bind-Value="currentProject.Description" />
                        <ValidationMessage For="@(() => currentProject.Description)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Objectives</label>
                        <InputTextArea class="form-control" rows="4" @bind-Value="currentProject.Objectives" />
                        <ValidationMessage For="@(() => currentProject.Objectives)" />
                    </div>
                    <div class="text-end">
                        <button type="button" class="btn btn-secondary me-2" @onclick="CloseModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-check-circle me-2"></i>
                            @(isEditMode ? "Update" : "Create") Project
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ProjectResponse> projects = new();
    private List<ProjectResponse> pagedProjects = new();
    private List<EmployeeResponse> employees = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditMode = false;
    private string searchQuery = "";
    private string selectedStatus = "";
    private string selectedPriority = "";
    private string selectedManager = "";
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalItems = 0;
    
    // Stats
    private int totalProjects = 0;
    private int activeProjects = 0;
    private int overDueProjects = 0;
    private int completedProjects = 0;
    
    private ProjectRequest currentProject = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await LoadEmployees();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            var query = $"/api/projects?page={currentPage}&pageSize={pageSize}";
            if (!string.IsNullOrEmpty(searchQuery))
                query += $"&q={Uri.EscapeDataString(searchQuery)}";
            if (!string.IsNullOrEmpty(selectedStatus))
                query += $"&status={Uri.EscapeDataString(selectedStatus)}";
            if (!string.IsNullOrEmpty(selectedManager))
                query += $"&managerId={selectedManager}";

            var response = await Http.GetFromJsonAsync<ProjectListResponse>(query);
            projects = response?.Items ?? new();
            totalItems = response?.Total ?? 0;
            totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
            
            UpdatePagedData();
            CalculateStats();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading projects: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadEmployees()
    {
        try
        {
            employees = await Http.GetFromJsonAsync<List<EmployeeResponse>>("/api/employees") ?? new();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading employees: {ex.Message}");
        }
    }

    private void UpdatePagedData()
    {
        var filteredProjects = projects.AsQueryable();
        
        if (!string.IsNullOrEmpty(selectedPriority))
            filteredProjects = filteredProjects.Where(p => p.Priority == selectedPriority);
            
        pagedProjects = filteredProjects.ToList();
    }

    private void CalculateStats()
    {
        totalProjects = projects.Count;
        activeProjects = projects.Count(p => p.Status == "Active");
        overDueProjects = projects.Count(p => p.EndDate < DateTime.Now && p.Status != "Completed");
        completedProjects = projects.Count(p => p.Status == "Completed");
    }

    private async Task OnSearchChanged()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task OnFilterChanged()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadData();
        }
    }

    private void OpenCreateModal()
    {
        currentProject = new ProjectRequest { Status = "Planning", Priority = "Medium", Progress = 0 };
        isEditMode = false;
        showModal = true;
    }

    private void EditProject(ProjectResponse project)
    {
        currentProject = new ProjectRequest
        {
            Project_ID = project.Project_ID,
            ProjectName = project.ProjectName,
            Description = project.Description ?? string.Empty,
            StartDate = project.StartDate ?? DateTime.MinValue,
            EndDate = project.EndDate ?? DateTime.MinValue,
            Status = project.Status,
            Priority = project.Priority,
            Budget = project.Budget,
            ActualCost = project.ActualCost,
            Progress = project.Progress,
            Manager_ID = project.Manager_ID,
            Objectives = project.Objectives ?? string.Empty
        };
        isEditMode = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentProject = new();
    }

    private async Task SaveProject()
    {
        try
        {
            if (isEditMode)
            {
                await Http.PutAsJsonAsync($"/api/projects/{currentProject.Project_ID}", currentProject);
                await JSRuntime.InvokeVoidAsync("alert", "Project updated successfully!");
            }
            else
            {
                await Http.PostAsJsonAsync("/api/projects", currentProject);
                await JSRuntime.InvokeVoidAsync("alert", "Project created successfully!");
            }
            
            CloseModal();
            await LoadData();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving project: {ex.Message}");
        }
    }

    private async Task ViewProject(ProjectResponse project)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Project Details:\n\nName: {project.ProjectName}\nManager: {project.ManagerName}\nStatus: {project.Status}\nPriority: {project.Priority}\nProgress: {project.Progress}%\nBudget: {project.Budget:C}\n\nDescription: {project.Description}");
    }

    private async Task ManageTeam(ProjectResponse project)
    {
        // Navigate to team management for this project
        await JSRuntime.InvokeVoidAsync("alert", $"Team management for {project.ProjectName} - Feature coming soon!");
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Active" => "bg-success bg-opacity-10 text-success",
            "Planning" => "bg-info bg-opacity-10 text-info",
            "On Hold" => "bg-warning bg-opacity-10 text-warning",
            "Completed" => "bg-primary bg-opacity-10 text-primary",
            "Cancelled" => "bg-danger bg-opacity-10 text-danger",
            _ => "bg-light text-dark"
        };
    }

    private string GetPriorityBadgeClass(string priority)
    {
        return priority switch
        {
            "Low" => "bg-success bg-opacity-10 text-success",
            "Medium" => "bg-warning bg-opacity-10 text-warning",
            "High" => "bg-danger bg-opacity-10 text-danger",
            "Critical" => "bg-danger text-white",
            _ => "bg-light text-dark"
        };
    }

    public class ProjectResponse
    {
        public int Project_ID { get; set; }
        public string ProjectName { get; set; } = "";
        public string? Description { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public string Status { get; set; } = "";
        public string Priority { get; set; } = "";
        public decimal Budget { get; set; }
        public decimal ActualCost { get; set; }
        public int Progress { get; set; }
        public int? Manager_ID { get; set; }
        public string? ManagerName { get; set; }
        public string? Objectives { get; set; }
    }

    public class ProjectListResponse
    {
        public List<ProjectResponse> Items { get; set; } = new();
        public int Total { get; set; }
        public int Page { get; set; }
        public int PageSize { get; set; }
    }
}
