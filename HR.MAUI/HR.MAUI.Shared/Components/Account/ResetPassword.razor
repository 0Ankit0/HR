@page "/account/resetpassword"
@using System.ComponentModel.DataAnnotations
@using System.Text
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

<h1>Reset password</h1>
<h2>Reset your password.</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        @if (!isAuthenticated)
        {
            <p>You must be logged in to reset your password.</p>
        }
        else
        {
            <EditForm Model="resetModel" OnValidSubmit="HandleReset">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-floating mb-3">
                    <InputText disabled @bind-Value="resetModel.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label class="form-label">Email</label>
                    <ValidationMessage For="@(() => resetModel.Email)" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="resetModel.Password" class="form-control" type="password" autocomplete="new-password" aria-required="true" placeholder="Enter your password." />
                    <label class="form-label">Password</label>
                    <ValidationMessage For="@(() => resetModel.Password)" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="resetModel.ConfirmPassword" class="form-control" type="password" autocomplete="new-password" aria-required="true" placeholder="Confirm your password." />
                    <label class="form-label">Confirm password</label>
                    <ValidationMessage For="@(() => resetModel.ConfirmPassword)" />
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Reset</button>
            </EditForm>
            @if (!string.IsNullOrEmpty(statusMessage))
            {
                <div class="alert alert-info mt-2">@statusMessage</div>
            }
        }
    </div>
</div>

@code {
    private ResetModel resetModel = new();
    private string? statusMessage;
    private bool isAuthenticated = false;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? code { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? email { get; set; }

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(code))
        {
            try
            {
                resetModel.Code = DecodeBase64Url(code);
            }
            catch
            {
                statusMessage = "Invalid or missing reset code.";
            }
        }
        if (!string.IsNullOrEmpty(email))
        {
            resetModel.Email = email;
        }
    }

    private static string DecodeBase64Url(string input)
    {
        string s = input.Replace('-', '+').Replace('_', '/');
        switch (s.Length % 4)
        {
            case 2: s += "=="; break;
            case 3: s += "="; break;
        }
        var bytes = Convert.FromBase64String(s);
        return System.Text.Encoding.UTF8.GetString(bytes);
    }

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
    }

    private async Task HandleReset()
    {
        statusMessage = string.Empty;
        var response = await Http.PostAsJsonAsync("/api/account/resetpassword", resetModel);
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/account/resetpasswordconfirmation");
        }
        else
        {
            statusMessage = await response.Content.ReadAsStringAsync();
        }
    }
    public class ResetModel
    {
        [Required]
        public string Email { get; set; } = string.Empty;
        [Required]
        public string Password { get; set; } = string.Empty;
        [Required]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
        [Required]
        public string Code { get; set; } = string.Empty;
    }
}