@page "/account/enableauthenticator"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<button class="btn btn-link mb-3" type="button" @onclick="NavigateBack">
    <i class="bi bi-arrow-left"></i> Back
</button>

<h1>Configure authenticator app</h1>
@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info">@statusMessage</div>
}
@if (isLoaded)
{
    <ol class="list">
        <li>
            <p>
                Download a two-factor authenticator app like Microsoft Authenticator for
                <a href="https://go.microsoft.com/fwlink/?Linkid=825072">Android</a> and
                <a href="https://go.microsoft.com/fwlink/?Linkid=825073">iOS</a> or
                Google Authenticator for
                <a
                    href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;hl=en">Android</a>
                and
                <a href="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8">iOS</a>.
            </p>
        </li>
        <li>
            <p>
                Scan the QR Code or enter this key <kbd>@sharedKey</kbd> into your two factor authenticator app. Spaces and
                casing do not matter.
            </p>
            <div id="qrCode" class="p-2"></div>
        </li>
        <li>
            <p>
                Once you have scanned the QR code or input the key above, your two factor authentication app will provide
                you
                with a unique code. Enter the code in the confirmation box below.
            </p>
            <EditForm Model="inputModel" OnValidSubmit="OnSubmitAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="inputModel.Code" class="form-control" autocomplete="off"
                        placeholder="Please enter the code." />
                    <label class="form-label">Verification Code</label>
                    <ValidationMessage For="@(() => inputModel.Code)" />
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Verify</button>
            </EditForm>
        </li>
    </ol>
    @if (showRecoveryCodes && recoveryCodes != null && recoveryCodes.Length > 0)
    {
        <div class="alert alert-success mt-3">
            <strong>Recovery codes:</strong>
            <ul>
                @foreach (var codes in recoveryCodes)
                {
                    <li><code>@codes</code></li>
                }
            </ul>
        </div>
    }
}
@code {
    private string? statusMessage;
    private bool isLoaded = false;
    private string sharedKey = "";
    private string qrCodeUri = "";
    private bool showRecoveryCodes = false;
    private string[]? recoveryCodes;
    private Enable2faInputModel inputModel = new();
    private bool qrRendered = false;

    protected override async Task OnInitializedAsync()
    {
        // Fetch sharedKey and QR code from API
        var result = await Http.GetFromJsonAsync<AuthenticatorSetupDto>("/api/2fa/setup");
        if (result != null)
        {
            sharedKey = result.SharedKey;
            qrCodeUri = result.QrCodeUri;
            isLoaded = true;
        }
        else
        {
            statusMessage = "Failed to load authenticator setup information.";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if ( isLoaded && !string.IsNullOrEmpty(qrCodeUri))
        {
            qrRendered = true;
            await JS.InvokeVoidAsync("renderQrCode", "qrCode", qrCodeUri);
   }
    }

    private async Task OnSubmitAsync()
    {
        // Call API to verify code and enable 2FA
        var response = await Http.PostAsJsonAsync("/api/2fa/enable", inputModel);
        if (response.IsSuccessStatusCode)
        {
            showRecoveryCodes = true;
            recoveryCodes = await response.Content.ReadFromJsonAsync<string[]>();
            statusMessage = "Authenticator enabled.";
        }
        else
        {
            statusMessage = await response.Content.ReadAsStringAsync();
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/account/manage/2FA", forceLoad: true);
    }

    public class AuthenticatorSetupDto
    {
        public string SharedKey { get; set; } = string.Empty;
        public string QrCodeUri { get; set; } = string.Empty;
    }

    public class Enable2faInputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Verification Code")]
        public string Code { get; set; } = string.Empty;
    }
}