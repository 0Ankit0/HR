@page "/account/confirm-email"
@using System.Text
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

<h1>Confirm email</h1>

@if (!isAuthenticated)
{
    <p>You must be logged in to confirm your email.</p>
}
else if (isLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info">@statusMessage</div>
}
@code {
    private bool isAuthenticated = false;

    [Parameter, SupplyParameterFromQuery]
    public string? UserId { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public string? Code { get; set; }

    private string? statusMessage;
    private bool isLoading = true;
    private bool shouldRedirect = false;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsAuthenticatedAsync();

        if (isAuthenticated)
        {
            try
            {
                var decodedCode = DecodeBase64Url(Code!);
                var response = await Http.PostAsJsonAsync($"api/user/confirm-email", new {
                    UserId = UserId,
                    Code = decodedCode
                });
                if (response.IsSuccessStatusCode)
                {
                    statusMessage = "Thank you for confirming your email.";
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    statusMessage = $"Error: {error}";
                }
            }
            catch
            {
                statusMessage = "Invalid confirmation link.";
            }
        }

        isLoading = false;
    }

    private static string DecodeBase64Url(string input)
    {
        // Replace URL-safe chars and pad with '='
        string s = input.Replace('-', '+').Replace('_', '/');
        switch (s.Length % 4)
        {
            case 2: s += "=="; break;
            case 3: s += "="; break;
        }
        var bytes = Convert.FromBase64String(s);
        return Encoding.UTF8.GetString(bytes);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (shouldRedirect)
        {
            shouldRedirect = false;
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
    }

}