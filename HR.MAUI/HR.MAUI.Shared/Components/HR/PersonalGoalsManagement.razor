@page "/hr/personal-goals"
@using global::HR.Models
@using System.Text.Json
@using System.Text
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="card-title mb-0">Personal Goals Management</h3>
                    <button class="btn btn-primary" @onclick="ShowCreateModal">
                        <i class="fas fa-plus"></i> Add Personal Goal
                    </button>
                </div>
                <div class="card-body">
                    <!-- Search and Filter Section -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-search"></i></span>
                                <input type="text" class="form-control" placeholder="Search goals..." @bind="searchTerm" @oninput="FilterGoals" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" @bind="selectedEmployeeFilter" @bind:after="FilterGoals">
                                <option value="">All Employees</option>
                                @foreach (var employee in employees)
                                {
                                    <option value="@employee.Employee_ID">@employee.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" @bind="selectedStatusFilter" @bind:after="FilterGoals">
                                <option value="">All Statuses</option>
                                <option value="true">Completed</option>
                                <option value="false">In Progress</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-outline-secondary w-100" @onclick="ClearFilters">Clear Filters</button>
                        </div>
                    </div>

                    <!-- Goals Table -->
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>Employee</th>
                                    <th>Goal</th>
                                    <th>Target Date</th>
                                    <th>Status</th>
                                    <th>Progress</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (filteredGoals.Any())
                                {
                                    @foreach (var goal in pagedGoals)
                                    {
                                        <tr>
                                            <td>@employees.FirstOrDefault(e => e.Employee_ID == goal.Employee_ID)?.Name</td>
                                            <td>
                                                <strong>@goal.Goal</strong>
                                            </td>
                                            <td>@goal.EndDate?.ToString("MMM dd, yyyy")</td>
                                            <td>
                                                @if (goal.IsCompleted)
                                                {
                                                    <span class="badge bg-success">Completed</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-warning">In Progress</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="progress" style="height: 20px;">
                                                    <div class="progress-bar @(goal.IsCompleted ? "bg-success" : "bg-info")" 
                                                         role="progressbar" 
                                                         style="width: @(goal.IsCompleted ? 100 : 50)%">
                                                        @(goal.IsCompleted ? 100 : 50)%
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="() => EditGoal(goal)">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    @if (!goal.IsCompleted)
                                                    {
                                                        <button type="button" class="btn btn-sm btn-outline-success" @onclick="() => MarkAsCompleted(goal)">
                                                            <i class="fas fa-check"></i>
                                                        </button>
                                                    }
                                                    <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => DeleteGoal(goal)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="6" class="text-center text-muted">No personal goals found</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Pagination -->
                    @if (totalPages > 1)
                    {
                        <nav aria-label="Goals pagination">
                            <ul class="pagination justify-content-center">
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                                </li>
                                @for (int i = 1; i <= totalPages; i++)
                                {
                                    <li class="page-item @(i == currentPage ? "active" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                    </li>
                                }
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                                </li>
                            </ul>
                        </nav>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Modal -->
<div class="modal fade @(showModal ? "show d-block" : "")" tabindex="-1" style="@(showModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(isEditMode ? "Edit Personal Goal" : "Create Personal Goal")</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <form @onsubmit="SaveGoal" @onsubmit:preventDefault="true">
                    <div class="mb-3">
                        <label for="employeeId" class="form-label">Employee</label>
                        <select id="employeeId" class="form-select" @bind="currentGoal.Employee_ID" required>
                            <option value="0">Select Employee</option>
                            @foreach (var employee in employees)
                            {
                                <option value="@employee.Employee_ID">@employee.Name</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="goal" class="form-label">Goal Description</label>
                        <textarea id="goal" class="form-control" rows="4" @bind="currentGoal.Goal" placeholder="Describe the personal goal..." required></textarea>
                    </div>

                    <div class="mb-3">
                        <label for="startDate" class="form-label">Start Date</label>
                        <input type="date" id="startDate" class="form-control" @bind="currentGoal.StartDate" />
                    </div>

                    <div class="mb-3">
                        <label for="endDate" class="form-label">Target Date</label>
                        <input type="date" id="endDate" class="form-control" @bind="currentGoal.EndDate" />
                    </div>

                    <div class="mb-3">
                        <div class="form-check">
                            <input type="checkbox" id="isCompleted" class="form-check-input" @bind="currentGoal.IsCompleted" />
                            <label class="form-check-label" for="isCompleted">
                                Goal Completed
                            </label>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">@(isEditMode ? "Update" : "Create") Goal</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@code {
    private List<PersonalGoalResponse> goals = new();
    private List<PersonalGoalResponse> filteredGoals = new();
    private List<PersonalGoalResponse> pagedGoals = new();
    private List<EmployeeResponse> employees = new();
    
    private string searchTerm = "";
    private string selectedEmployeeFilter = "";
    private string selectedStatusFilter = "";
    
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 0;
    
    private bool showModal = false;
    private bool isEditMode = false;
    
    private PersonalGoalRequest currentGoal = new();
    private PersonalGoalResponse? selectedGoal;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
        await LoadGoals();
    }

    private async Task LoadEmployees()
    {
        try
        {
            var response = await Http.GetAsync("/api/employees");
            if (response.IsSuccessStatusCode)
            {
                employees = await response.Content.ReadFromJsonAsync<List<EmployeeResponse>>() ?? new();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading employees:", ex.Message);
        }
    }

    private async Task LoadGoals()
    {
        try
        {
            var response = await Http.GetAsync("/api/personalgoals");
            if (response.IsSuccessStatusCode)
            {
                goals = await response.Content.ReadFromJsonAsync<List<PersonalGoalResponse>>() ?? new();
                FilterGoals();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading goals:", ex.Message);
        }
    }

    private void FilterGoals()
    {
        var query = goals.AsEnumerable();

        if (!string.IsNullOrEmpty(searchTerm))
        {
            query = query.Where(g => g.Goal.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrEmpty(selectedEmployeeFilter) && int.TryParse(selectedEmployeeFilter, out var employeeId))
        {
            query = query.Where(g => g.Employee_ID == employeeId);
        }

        if (!string.IsNullOrEmpty(selectedStatusFilter) && bool.TryParse(selectedStatusFilter, out var isCompleted))
        {
            query = query.Where(g => g.IsCompleted == isCompleted);
        }

        filteredGoals = query.OrderByDescending(g => g.StartDate).ToList();
        UpdatePagedData();
    }

    private void UpdatePagedData()
    {
        totalPages = (int)Math.Ceiling((double)filteredGoals.Count / pageSize);
        currentPage = Math.Max(1, Math.Min(currentPage, totalPages));
        
        pagedGoals = filteredGoals
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            UpdatePagedData();
        }
    }

    private void ClearFilters()
    {
        searchTerm = "";
        selectedEmployeeFilter = "";
        selectedStatusFilter = "";
        currentPage = 1;
        FilterGoals();
    }

    private void ShowCreateModal()
    {
        currentGoal = new PersonalGoalRequest { StartDate = DateTime.Now, EndDate = DateTime.Now.AddMonths(3) };
        isEditMode = false;
        showModal = true;
    }

    private void EditGoal(PersonalGoalResponse goal)
    {
        currentGoal = new PersonalGoalRequest
        {
            Employee_ID = goal.Employee_ID,
            Goal = goal.Goal,
            StartDate = goal.StartDate,
            EndDate = goal.EndDate,
            IsCompleted = goal.IsCompleted
        };
        selectedGoal = goal;
        isEditMode = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentGoal = new();
        selectedGoal = null;
    }

    private async Task SaveGoal()
    {
        try
        {
            var json = JsonSerializer.Serialize(currentGoal);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            HttpResponseMessage response;
            if (isEditMode && selectedGoal != null)
            {
                response = await Http.PutAsync($"/api/personalgoals/{selectedGoal.PersonalGoal_ID}", content);
            }
            else
            {
                response = await Http.PostAsync("/api/personalgoals", content);
            }

            if (response.IsSuccessStatusCode)
            {
                await LoadGoals();
                CloseModal();
                await JSRuntime.InvokeVoidAsync("alert", $"Personal goal {(isEditMode ? "updated" : "created")} successfully!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error saving goal. Please try again.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error saving goal:", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", "Error saving goal. Please try again.");
        }
    }

    private async Task MarkAsCompleted(PersonalGoalResponse goal)
    {
        try
        {
            var updatedGoal = new PersonalGoalRequest
            {
                Employee_ID = goal.Employee_ID,
                Goal = goal.Goal,
                StartDate = goal.StartDate,
                EndDate = goal.EndDate,
                IsCompleted = true
            };

            var json = JsonSerializer.Serialize(updatedGoal);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            var response = await Http.PutAsync($"/api/personalgoals/{goal.PersonalGoal_ID}", content);
            if (response.IsSuccessStatusCode)
            {
                goal.IsCompleted = true;
                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("alert", "Goal marked as completed!");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error updating goal:", ex.Message);
        }
    }

    private async Task DeleteGoal(PersonalGoalResponse goal)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this goal?"))
        {
            try
            {
                var response = await Http.DeleteAsync($"/api/personalgoals/{goal.PersonalGoal_ID}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadGoals();
                    await JSRuntime.InvokeVoidAsync("alert", "Goal deleted successfully!");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error deleting goal. Please try again.");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("console.error", "Error deleting goal:", ex.Message);
                await JSRuntime.InvokeVoidAsync("alert", "Error deleting goal. Please try again.");
            }
        }
    }
}
