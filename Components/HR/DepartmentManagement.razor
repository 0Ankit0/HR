@page "/departments"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using global::HR.Models
@using System.Text.Json
@using System.Text

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 text-primary fw-bold mb-0">
                        <i class="bi bi-diagram-3 me-2"></i>Department Management
                    </h1>
                    <p class="text-muted mb-0">Manage organizational departments and structure</p>
                </div>
                <button class="btn btn-primary" @onclick="OpenCreateModal">
                    <i class="bi bi-plus-circle me-2"></i>Add Department
                </button>
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-primary bg-opacity-10 p-3 rounded">
                                <i class="bi bi-diagram-3 text-primary fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@totalDepartments</div>
                            <div class="text-muted small">Total Departments</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-success bg-opacity-10 p-3 rounded">
                                <i class="bi bi-person-check text-success fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@activeDepartments</div>
                            <div class="text-muted small">Active Departments</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-info bg-opacity-10 p-3 rounded">
                                <i class="bi bi-people text-info fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@averageEmployees</div>
                            <div class="text-muted small">Avg Employees/Dept</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-warning bg-opacity-10 p-3 rounded">
                                <i class="bi bi-geo-alt text-warning fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@uniqueLocations</div>
                            <div class="text-muted small">Unique Locations</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="row mb-3">
        <div class="col-md-6">
            <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                    <i class="bi bi-search text-muted"></i>
                </span>
                <input type="text" class="form-control border-start-0" 
                       placeholder="Search departments..." 
                       @bind="searchQuery" @onkeyup="OnSearchChanged" />
            </div>
        </div>
        <div class="col-md-6 text-end">
            <div class="btn-group" role="group">
                <button class="btn btn-outline-secondary" @onclick="RefreshData">
                    <i class="bi bi-arrow-clockwise me-1"></i>Refresh
                </button>
                <button class="btn btn-outline-secondary" @onclick="ExportData">
                    <i class="bi bi-download me-1"></i>Export
                </button>
            </div>
        </div>
    </div>

    <!-- Departments Table -->
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div class="mt-2 text-muted">Loading departments...</div>
                </div>
            }
            else if (departments.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th class="border-0 fw-semibold">Department</th>
                                <th class="border-0 fw-semibold">Location</th>
                                <th class="border-0 fw-semibold">Manager</th>
                                <th class="border-0 fw-semibold">Employees</th>
                                <th class="border-0 fw-semibold text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var department in pagedDepartments)
                            {
                                <tr>
                                    <td class="align-middle">
                                        <div class="d-flex align-items-center">
                                            <div class="bg-primary bg-opacity-10 p-2 rounded me-3">
                                                <i class="bi bi-diagram-3 text-primary"></i>
                                            </div>
                                            <div>
                                                <div class="fw-semibold">@department.Department_Name</div>
                                                <small class="text-muted">ID: @department.Department_ID</small>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="align-middle">
                                        <span class="badge bg-light text-dark">
                                            <i class="bi bi-geo-alt me-1"></i>@department.Department_Location
                                        </span>
                                    </td>
                                    <td class="align-middle">
                                        @if (department.ManagerID.HasValue)
                                        {
                                            <span class="text-success">
                                                <i class="bi bi-person-check me-1"></i>Manager ID: @department.ManagerID
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">
                                                <i class="bi bi-person-dash me-1"></i>No Manager
                                            </span>
                                        }
                                    </td>
                                    <td class="align-middle">
                                        <span class="badge bg-info">
                                            @(departmentEmployeeCounts.GetValueOrDefault(department.Department_ID, 0)) employees
                                        </span>
                                    </td>
                                    <td class="align-middle text-end">
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-primary" @onclick="() => ViewDepartment(department.Department_ID)">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            <button class="btn btn-outline-secondary" @onclick="() => EditDepartment(department)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-outline-danger" @onclick="() => DeleteDepartment(department.Department_ID)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="card-footer bg-transparent border-top-0">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="text-muted small">
                            Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalDepartments) of @totalDepartments results
                        </div>
                        <nav>
                            <ul class="pagination pagination-sm mb-0">
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">
                                        <i class="bi bi-chevron-left"></i>
                                    </button>
                                </li>
                                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                {
                                    <li class="page-item @(i == currentPage ? "active" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                    </li>
                                }
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                        <i class="bi bi-chevron-right"></i>
                                    </button>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="bi bi-diagram-3 text-muted" style="font-size: 3rem;"></i>
                    <h5 class="text-muted mt-3">No departments found</h5>
                    <p class="text-muted">Create your first department to get started.</p>
                    <button class="btn btn-primary" @onclick="OpenCreateModal">
                        <i class="bi bi-plus-circle me-2"></i>Add Department
                    </button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Create/Edit Department Modal -->
<div class="modal fade @(showModal ? "show d-block" : "")" tabindex="-1" style="@(showModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-diagram-3 me-2"></i>@(isEditing ? "Edit Department" : "Add New Department")
                </h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <EditForm Model="currentDepartment" OnValidSubmit="SaveDepartment">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Department Name <span class="text-danger">*</span></label>
                        <InputText @bind-Value="currentDepartment.Department_Name" class="form-control" placeholder="Enter department name" />
                        <ValidationMessage For="() => currentDepartment.Department_Name" class="text-danger small" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Location</label>
                        <InputText @bind-Value="currentDepartment.Department_Location" class="form-control" placeholder="Enter department location" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Manager ID</label>
                        <InputNumber @bind-Value="currentDepartment.ManagerID" class="form-control" placeholder="Enter manager ID (optional)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button type="submit" class="btn btn-primary" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        <i class="bi bi-check-circle me-2"></i>@(isEditing ? "Update" : "Create") Department
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private List<DepartmentResponse> departments = new();
    private List<DepartmentResponse> filteredDepartments = new();
    private List<DepartmentResponse> pagedDepartments = new();
    private Dictionary<int, int> departmentEmployeeCounts = new();
    private DepartmentStatsResponse? departmentStats;
    private string searchQuery = string.Empty;
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditing = false;
    private bool isSaving = false;
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)filteredDepartments.Count / pageSize);
    
    // Stats
    private int totalDepartments => departments.Count;
    private int activeDepartments => departments.Count(d => !string.IsNullOrEmpty(d.Department_Name));
    private int averageEmployees => departmentStats?.AverageEmployees ?? 0;
    private int uniqueLocations => departments.Select(d => d.Department_Location).Distinct().Count();
    
    private DepartmentResponse currentDepartment = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDepartments();
        await LoadDepartmentStats();
        await LoadEmployeeCounts();
    }

    private async Task LoadDepartments()
    {
        isLoading = true;
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse<DepartmentResponse>>($"/api/departments?page=1&pageSize=100");
            departments = response?.Items ?? new List<DepartmentResponse>();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            // Handle error - in a real app, you'd use a notification service
            Console.WriteLine($"Error loading departments: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ApplyFilters()
    {
        filteredDepartments = departments.Where(d => 
            string.IsNullOrEmpty(searchQuery) || 
            d.Department_Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
            d.Department_Location.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
        ).ToList();
        
        currentPage = 1;
        UpdatePagedResults();
    }

    private void UpdatePagedResults()
    {
        pagedDepartments = filteredDepartments
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
        StateHasChanged();
    }

    private async Task OnSearchChanged()
    {
        await Task.Delay(300); // Debounce
        ApplyFilters();
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            UpdatePagedResults();
        }
    }

    private void OpenCreateModal()
    {
        currentDepartment = new DepartmentResponse();
        isEditing = false;
        showModal = true;
    }

    private void EditDepartment(DepartmentResponse department)
    {
        currentDepartment = new DepartmentResponse
        {
            Department_ID = department.Department_ID,
            Department_Name = department.Department_Name,
            Department_Location = department.Department_Location,
            ManagerID = department.ManagerID
        };
        isEditing = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentDepartment = new();
    }

    private async Task SaveDepartment()
    {
        isSaving = true;
        try
        {
            if (isEditing)
            {
                await Http.PutAsJsonAsync($"/api/departments/{currentDepartment.Department_ID}", 
                    new { 
                        Department_Name = currentDepartment.Department_Name,
                        Department_Location = currentDepartment.Department_Location,
                        ManagerID = currentDepartment.ManagerID
                    });
            }
            else
            {
                await Http.PostAsJsonAsync("/api/departments", 
                    new { 
                        Department_Name = currentDepartment.Department_Name,
                        Department_Location = currentDepartment.Department_Location,
                        ManagerID = currentDepartment.ManagerID
                    });
            }
            
            CloseModal();
            await LoadDepartments();
            await LoadDepartmentStats();
            await LoadEmployeeCounts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving department: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteDepartment(int departmentId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this department?"))
        {
            try
            {
                await Http.DeleteAsync($"/api/departments/{departmentId}");
                await LoadDepartments();
                await LoadDepartmentStats();
                await LoadEmployeeCounts();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting department: {ex.Message}");
            }
        }
    }

    private void ViewDepartment(int departmentId)
    {
        // Navigate to department details or show details modal
        Console.WriteLine($"Viewing department {departmentId}");
    }

    private async Task RefreshData()
    {
        await LoadDepartments();
        await LoadDepartmentStats();
        await LoadEmployeeCounts();
    }

    private async Task ExportData()
    {
        // Implement export functionality
        await JSRuntime.InvokeVoidAsync("alert", "Export functionality would be implemented here");
    }

    private async Task LoadDepartmentStats()
    {
        try
        {
            departmentStats = await Http.GetFromJsonAsync<DepartmentStatsResponse>("/api/departments/stats");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading department stats: {ex.Message}");
        }
    }

    private async Task LoadEmployeeCounts()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<DepartmentEmployeeCountResponse>>("/api/departments/employee-counts");
            departmentEmployeeCounts = response?.ToDictionary(x => x.DepartmentId, x => x.EmployeeCount) ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading employee counts: {ex.Message}");
        }
    }

    public class ApiResponse<T>
    {
        public List<T> Items { get; set; } = new();
        public int Total { get; set; }
        public int Page { get; set; }
        public int PageSize { get; set; }
    }

    public class DepartmentStatsResponse
    {
        public int Total { get; set; }
        public int WithManagers { get; set; }
        public int UniqueLocations { get; set; }
        public int AverageEmployees { get; set; }
    }

    public class DepartmentEmployeeCountResponse
    {
        public int DepartmentId { get; set; }
        public string DepartmentName { get; set; } = "";
        public int EmployeeCount { get; set; }
    }
}
