@page "/hr/nominations"
@using global::HR.Models
@using System.Text.Json
@using System.Text
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="card-title mb-0">Employee Nominations</h3>
                    <button class="btn btn-primary" @onclick="ShowCreateModal">
                        <i class="fas fa-plus"></i> Create Nomination
                    </button>
                </div>
                <div class="card-body">
                    <!-- Search and Filter Section -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-search"></i></span>
                                <input type="text" class="form-control" placeholder="Search nominations..." @bind="searchTerm" @oninput="FilterNominations" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" @bind="selectedEmployeeFilter" @bind:after="FilterNominations">
                                <option value="">All Employees</option>
                                @foreach (var employee in employees)
                                {
                                    <option value="@employee.Employee_ID">@employee.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" @bind="selectedStatusFilter" @bind:after="FilterNominations">
                                <option value="">All Statuses</option>
                                <option value="pending">Pending</option>
                                <option value="awarded">Awarded</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-outline-secondary w-100" @onclick="ClearFilters">Clear Filters</button>
                        </div>
                    </div>

                    <!-- Nominations Table -->
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>Employee</th>
                                    <th>Reason</th>
                                    <th>Date Nominated</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (filteredNominations?.Any() == true)
                                {
                                    @foreach (var nomination in filteredNominations)
                                    {
                                        <tr>
                                            <td>
                                                @{
                                                    var employee = employees.FirstOrDefault(e => e.Employee_ID == nomination.Employee_ID);
                                                }
                                                @if (employee != null)
                                                {
                                                    <span>@employee.Name</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="text-truncate" style="max-width: 300px;" title="@nomination.Reason">
                                                    @nomination.Reason
                                                </div>
                                            </td>
                                            <td>@nomination.DateNominated.ToString("yyyy-MM-dd")</td>
                                            <td>
                                                <span class="badge @(nomination.IsAwarded ? "bg-success" : "bg-warning")">
                                                    @(nomination.IsAwarded ? "Awarded" : "Pending")
                                                </span>
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-info" @onclick="() => ShowViewModal(nomination)">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowEditModal(nomination)">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    @if (!nomination.IsAwarded)
                                                    {
                                                        <button class="btn btn-sm btn-outline-success" @onclick="() => AwardNomination(nomination.Nomination_ID)" title="Mark as Awarded">
                                                            <i class="fas fa-award"></i>
                                                        </button>
                                                    }
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteNomination(nomination.Nomination_ID)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="5" class="text-center text-muted">No nominations found</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Modal -->
<div class="modal fade @(showModal ? "show d-block" : "")" tabindex="-1" style="@(showModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(isEditing ? "Edit Nomination" : "Create Nomination")</h5>
                <button type="button" class="btn-close" @onclick="HideModal"></button>
            </div>
            <form @onsubmit="SaveNomination" @onsubmit:preventDefault="true">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Employee *</label>
                                <select class="form-select" @bind="currentNomination.Employee_ID" required>
                                    <option value="0">Select Employee</option>
                                    @foreach (var employee in employees)
                                    {
                                        <option value="@employee.Employee_ID">@employee.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Date Nominated *</label>
                                <input @bind="currentNomination.DateNominated" class="form-control" type="datetime-local" required />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="mb-3">
                                <label class="form-label">Reason for Nomination *</label>
                                <textarea @bind="currentNomination.Reason" class="form-control" rows="5" placeholder="Enter reason for nomination..." required></textarea>
                            </div>
                        </div>
                    </div>
                    @if (isEditing)
                    {
                        <div class="row">
                            <div class="col-12">
                                <div class="form-check">
                                    <input @bind="currentNomination.IsAwarded" class="form-check-input" type="checkbox" />
                                    <label class="form-check-label">Mark as Awarded</label>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancel</button>
                    <button type="submit" class="btn btn-primary">@(isEditing ? "Update" : "Create") Nomination</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- View Modal -->
<div class="modal fade @(showViewModal ? "show d-block" : "")" tabindex="-1" style="@(showViewModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Nomination Details</h5>
                <button type="button" class="btn-close" @onclick="HideViewModal"></button>
            </div>
            <div class="modal-body">
                @if (viewNomination != null)
                {
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Employee:</strong>
                            @{
                                var emp = employees.FirstOrDefault(e => e.Employee_ID == viewNomination.Employee_ID);
                            }
                            <p>@(emp?.Name ?? "Unknown")</p>
                        </div>
                        <div class="col-md-6">
                            <strong>Date Nominated:</strong>
                            <p>@viewNomination.DateNominated.ToString("yyyy-MM-dd")</p>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Status:</strong>
                            <p>
                                <span class="badge @(viewNomination.IsAwarded ? "bg-success" : "bg-warning")">
                                    @(viewNomination.IsAwarded ? "Awarded" : "Pending")
                                </span>
                            </p>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <strong>Reason for Nomination:</strong>
                            <div class="border rounded p-3 mt-2" style="background-color: #f8f9fa;">
                                @viewNomination.Reason
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideViewModal">Close</button>
                @if (viewNomination != null && !viewNomination.IsAwarded)
                {
                    <button type="button" class="btn btn-success" @onclick="() => AwardNomination(viewNomination.Nomination_ID)">
                        <i class="fas fa-award"></i> Mark as Awarded
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<NominationResponse> nominations = new();
    private List<NominationResponse> filteredNominations = new();
    private List<EmployeeResponse> employees = new();
    
    private NominationRequest currentNomination = new();
    private NominationResponse? viewNomination = null;
    private bool showModal = false;
    private bool showViewModal = false;
    private bool isEditing = false;
    private int editingId = 0;
    
    private string searchTerm = "";
    private string selectedEmployeeFilter = "";
    private string selectedStatusFilter = "";

    public class ApiResponse
    {
        public int Total { get; set; }
        public int Page { get; set; }
        public int PageSize { get; set; }
        public List<NominationResponse> Items { get; set; } = new();
    }

    public class EmployeeApiResponse
    {
        public int Total { get; set; }
        public int Page { get; set; }
        public int PageSize { get; set; }
        public List<EmployeeResponse> Items { get; set; } = new();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            var nominationsResponse = await Http.GetAsync("/api/nominations");
            if (nominationsResponse.IsSuccessStatusCode)
            {
                var nominationsJson = await nominationsResponse.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<ApiResponse>(nominationsJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                nominations = result?.Items ?? new();
            }

            var employeesResponse = await Http.GetAsync("/api/employees");
            if (employeesResponse.IsSuccessStatusCode)
            {
                var employeesJson = await employeesResponse.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<EmployeeApiResponse>(employeesJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                employees = result?.Items ?? new();
            }

            FilterNominations();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading data: {ex.Message}");
        }
    }

    private void FilterNominations()
    {
        filteredNominations = nominations.Where(n =>
            (string.IsNullOrEmpty(searchTerm) || 
             n.Reason.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             employees.Any(e => e.Employee_ID == n.Employee_ID && e.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))) &&
            (string.IsNullOrEmpty(selectedEmployeeFilter) || n.Employee_ID.ToString() == selectedEmployeeFilter) &&
            (string.IsNullOrEmpty(selectedStatusFilter) || 
             (selectedStatusFilter == "pending" && !n.IsAwarded) ||
             (selectedStatusFilter == "awarded" && n.IsAwarded))
        ).OrderByDescending(n => n.DateNominated).ToList();
        
        StateHasChanged();
    }

    private void ClearFilters()
    {
        searchTerm = "";
        selectedEmployeeFilter = "";
        selectedStatusFilter = "";
        FilterNominations();
    }

    private void ShowCreateModal()
    {
        currentNomination = new NominationRequest
        {
            DateNominated = DateTime.Today,
            IsAwarded = false
        };
        editingId = 0;
        isEditing = false;
        showModal = true;
    }

    private void ShowEditModal(NominationResponse nomination)
    {
        currentNomination = new NominationRequest
        {
            Employee_ID = nomination.Employee_ID,
            Reason = nomination.Reason,
            DateNominated = nomination.DateNominated,
            IsAwarded = nomination.IsAwarded,
            NominatedBy = nomination.NominatedBy
        };
        editingId = nomination.Nomination_ID;
        isEditing = true;
        showModal = true;
    }

    private void ShowViewModal(NominationResponse nomination)
    {
        viewNomination = nomination;
        showViewModal = true;
    }

    private void HideModal()
    {
        showModal = false;
        currentNomination = new NominationRequest();
        editingId = 0;
    }

    private void HideViewModal()
    {
        showViewModal = false;
        viewNomination = null;
    }

    private async Task SaveNomination()
    {
        try
        {
            var json = JsonSerializer.Serialize(currentNomination);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            HttpResponseMessage response;
            if (isEditing)
            {
                response = await Http.PutAsync($"/api/nominations/{editingId}", content);
            }
            else
            {
                response = await Http.PostAsync("/api/nominations", content);
            }

            if (response.IsSuccessStatusCode)
            {
                HideModal();
                await LoadData();
                await JSRuntime.InvokeVoidAsync("alert", $"Nomination {(isEditing ? "updated" : "created")} successfully!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error {(isEditing ? "updating" : "creating")} nomination.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private async Task AwardNomination(int nominationId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to mark this nomination as awarded?"))
        {
            try
            {
                var nomination = nominations.FirstOrDefault(n => n.Nomination_ID == nominationId);
                if (nomination != null)
                {
                    nomination.IsAwarded = true;
                    var json = JsonSerializer.Serialize(nomination);
                    var content = new StringContent(json, Encoding.UTF8, "application/json");
                    
                    var response = await Http.PutAsync($"/api/nominations/{nominationId}", content);
                    if (response.IsSuccessStatusCode)
                    {
                        HideViewModal();
                        await LoadData();
                        await JSRuntime.InvokeVoidAsync("alert", "Nomination marked as awarded successfully!");
                    }
                    else
                    {
                        await JSRuntime.InvokeVoidAsync("alert", "Error updating nomination status.");
                    }
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
            }
        }
    }

    private async Task DeleteNomination(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this nomination?"))
        {
            try
            {
                var response = await Http.DeleteAsync($"/api/nominations/{id}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadData();
                    await JSRuntime.InvokeVoidAsync("alert", "Nomination deleted successfully!");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error deleting nomination.");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
            }
        }
    }
}
