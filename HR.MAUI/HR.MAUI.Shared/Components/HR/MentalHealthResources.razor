@page "/hr/mental-health-resources"
@using global::HR.Models
@using System.Text.Json
@using System.Text
@inject HttpClient Http
@inject IAlertService AlertService

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="card-title mb-0">Mental Health Resources</h3>
                    <button class="btn btn-primary" @onclick="ShowCreateModal">
                        <i class="fas fa-plus"></i> Add Resource
                    </button>
                </div>
                <div class="card-body">
                    <!-- Search Section -->
                    <div class="row mb-3">
                        <div class="col-md-10">
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-search"></i></span>
                                <input type="text" class="form-control" placeholder="Search resources..." @bind="searchTerm" @oninput="FilterResources" />
                            </div>
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-outline-secondary w-100" @onclick="ClearFilters">Clear Search</button>
                        </div>
                    </div>

                    <!-- Resources Table -->
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>Title</th>
                                    <th>Description</th>
                                    <th>Contact Info</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (filteredResources?.Any() == true)
                                {
                                    @foreach (var resource in filteredResources)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-heart text-danger me-2"></i>
                                                    <strong>@resource.Title</strong>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="text-truncate" style="max-width: 300px;" title="@resource.Description">
                                                    @resource.Description
                                                </div>
                                            </td>
                                            <td>
                                                <div class="text-truncate" style="max-width: 200px;" title="@resource.ContactInfo">
                                                    @resource.ContactInfo
                                                </div>
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-info" @onclick="() => ShowViewModal(resource)">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowEditModal(resource)">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteResource(resource.MentalHealthResource_ID)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="4" class="text-center text-muted">No mental health resources found</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Modal -->
<div class="modal fade @(showModal ? "show d-block" : "")" tabindex="-1" style="@(showModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(isEditing ? "Edit Resource" : "Add Mental Health Resource")</h5>
                <button type="button" class="btn-close" @onclick="HideModal"></button>
            </div>
            <EditForm Model="currentResource" OnValidSubmit="SaveResource">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <div class="row">
                        <div class="col-12">
                            <div class="mb-3">
                                <label class="form-label">Title *</label>
                                <InputText class="form-control" @bind-Value="currentResource.Title" placeholder="Resource title..." required />
                                <ValidationMessage For="@(() => currentResource.Title)" class="text-danger" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="mb-3">
                                <label class="form-label">Contact Information</label>
                                <InputText class="form-control" @bind-Value="currentResource.ContactInfo" placeholder="Phone, email, website, etc." />
                                <ValidationMessage For="@(() => currentResource.ContactInfo)" class="text-danger" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <InputTextArea class="form-control" @bind-Value="currentResource.Description" rows="5" placeholder="Describe the mental health resource..." />
                                <ValidationMessage For="@(() => currentResource.Description)" class="text-danger" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancel</button>
                    <button type="submit" class="btn btn-primary">@(isEditing ? "Update" : "Create") Resource</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- View Modal -->
<div class="modal fade @(showViewModal ? "show d-block" : "")" tabindex="-1" style="@(showViewModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Mental Health Resource Details</h5>
                <button type="button" class="btn-close" @onclick="HideViewModal"></button>
            </div>
            <div class="modal-body">
                @if (viewResource != null)
                {
                    <div class="text-center mb-4">
                        <i class="fas fa-heart fa-3x text-danger"></i>
                        <h3 class="mt-2">@viewResource.Title</h3>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Contact Information:</strong>
                            <p>@(viewResource.ContactInfo ?? "Not provided")</p>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <strong>Description:</strong>
                            <div class="border rounded p-3 mt-2" style="background-color: #f8f9fa;">
                                @(viewResource.Description ?? "No description provided")
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideViewModal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<MentalHealthResourceResponse> resources = new();
    private List<MentalHealthResourceResponse> filteredResources = new();
    
    private MentalHealthResourceRequest currentResource = new();
    private MentalHealthResourceResponse? viewResource = null;
    private bool showModal = false;
    private bool showViewModal = false;
    private bool isEditing = false;
    
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            var response = await Http.GetAsync("/api/mentalhealthresources");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                resources = JsonSerializer.Deserialize<List<MentalHealthResourceResponse>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new();
            }

            FilterResources();
        }
        catch (Exception ex)
        {
            await AlertService.ShowAlert($"Error loading data: {ex.Message}", "Error");
        }
    }

    private void FilterResources()
    {
        filteredResources = resources.Where(r =>
            string.IsNullOrEmpty(searchTerm) || 
            r.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            (r.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (r.ContactInfo?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
        ).OrderByDescending(r => r.MentalHealthResource_ID).ToList();
        
        StateHasChanged();
    }

    private void ClearFilters()
    {
        searchTerm = "";
        FilterResources();
    }

    private void ShowCreateModal()
    {
        currentResource = new MentalHealthResourceRequest();
        isEditing = false;
        showModal = true;
    }

    private void ShowEditModal(MentalHealthResourceResponse resource)
    {
        currentResource = new MentalHealthResourceRequest
        {
            Title = resource.Title,
            Description = resource.Description,
            ContactInfo = resource.ContactInfo
        };
        isEditing = true;
        showModal = true;
    }

    private void ShowViewModal(MentalHealthResourceResponse resource)
    {
        viewResource = resource;
        showViewModal = true;
    }

    private void HideModal()
    {
        showModal = false;
        currentResource = new();
    }

    private void HideViewModal()
    {
        showViewModal = false;
        viewResource = null;
    }

    private async Task SaveResource()
    {
        try
        {
            var json = JsonSerializer.Serialize(currentResource);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            HttpResponseMessage response;
            if (isEditing && viewResource != null)
            {
                response = await Http.PutAsync($"/api/mentalhealthresources/{viewResource.MentalHealthResource_ID}", content);
            }
            else
            {
                response = await Http.PostAsync("/api/mentalhealthresources", content);
            }

            if (response.IsSuccessStatusCode)
            {
                HideModal();
                await LoadData();
                await AlertService.ShowAlert($"Mental health resource {(isEditing ? "updated" : "created")} successfully!", "Success");
            }
            else
            {
                await AlertService.ShowAlert($"Error {(isEditing ? "updating" : "creating")} resource.", "Error");
            }
        }
        catch (Exception ex)
        {
            await AlertService.ShowAlert($"Error: {ex.Message}", "Error");
        }
    }

    private async Task DeleteResource(int id)
    {
        if (await AlertService.ShowConfirm("Are you sure you want to delete this mental health resource?", "Confirm Delete"))
        {
            try
            {
                var response = await Http.DeleteAsync($"/api/mentalhealthresources/{id}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadData();
                    await AlertService.ShowAlert("Mental health resource deleted successfully!", "Success");
                }
                else
                {
                    await AlertService.ShowAlert("Error deleting resource.", "Error");
                }
            }
            catch (Exception ex)
            {
                await AlertService.ShowAlert($"Error: {ex.Message}", "Error");
            }
        }
    }
}
