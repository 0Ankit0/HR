@page "/benefits"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using global::HR.Models
@using System.Text.Json
@using System.Text

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 text-primary fw-bold mb-0">
                        <i class="bi bi-gift me-2"></i>Benefits Management
                    </h1>
                    <p class="text-muted mb-0">Manage employee benefits and enrollments</p>
                </div>
                <button class="btn btn-primary" @onclick="OpenCreateModal">
                    <i class="bi bi-plus-circle me-2"></i>Add Benefit
                </button>
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-primary bg-opacity-10 p-3 rounded">
                                <i class="bi bi-gift text-primary fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@totalBenefits</div>
                            <div class="text-muted small">Total Benefits</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-success bg-opacity-10 p-3 rounded">
                                <i class="bi bi-people text-success fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@enrolledEmployees</div>
                            <div class="text-muted small">Enrolled Employees</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-info bg-opacity-10 p-3 rounded">
                                <i class="bi bi-currency-dollar text-info fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@totalCost.ToString("C")</div>
                            <div class="text-muted small">Total Cost</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-warning bg-opacity-10 p-3 rounded">
                                <i class="bi bi-percent text-warning fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@enrollmentRate.ToString("P1")</div>
                            <div class="text-muted small">Enrollment Rate</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="row mb-3">
        <div class="col-md-4">
            <select class="form-select" @bind="selectedBenefitType">
                <option value="">All Benefit Types</option>
                <option value="Health Insurance">Health Insurance</option>
                <option value="Dental Insurance">Dental Insurance</option>
                <option value="Vision Insurance">Vision Insurance</option>
                <option value="Life Insurance">Life Insurance</option>
                <option value="Retirement Plan">Retirement Plan</option>
                <option value="Paid Time Off">Paid Time Off</option>
                <option value="Other">Other</option>
            </select>
        </div>
        <div class="col-md-4">
            <select class="form-select" @bind="selectedEmployee">
                <option value="">All Employees</option>
                @foreach (var employee in employees)
                {
                    <option value="@employee.Employee_ID">@employee.Name @employee.LastName</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                    <i class="bi bi-search text-muted"></i>
                </span>
                <input type="text" class="form-control border-start-0" 
                       placeholder="Search benefits..." 
                       @bind="searchQuery" @onkeyup="OnSearchChanged" />
            </div>
        </div>
    </div>

    <!-- Benefits Table -->
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div class="mt-2 text-muted">Loading benefits...</div>
                </div>
            }
            else if (benefits.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th class="border-0 fw-semibold">Employee</th>
                                <th class="border-0 fw-semibold">Benefit Type</th>
                                <th class="border-0 fw-semibold">Provider</th>
                                <th class="border-0 fw-semibold">Cost</th>
                                <th class="border-0 fw-semibold">Start Date</th>
                                <th class="border-0 fw-semibold">End Date</th>
                                <th class="border-0 fw-semibold text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var benefit in pagedBenefits)
                            {
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="bg-primary bg-opacity-10 rounded-circle p-2 me-3">
                                                <i class="bi bi-person text-primary"></i>
                                            </div>
                                            <div>
                                                <div class="fw-semibold">@benefit.EmployeeName</div>
                                                <div class="text-muted small">ID: @benefit.Employee_ID</div>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge bg-primary bg-opacity-10 text-primary px-3 py-2">
                                            @benefit.BenefitType
                                        </span>
                                    </td>
                                    <td>@benefit.Provider</td>
                                    <td>@benefit.Cost.ToString("C")</td>
                                    <td>@benefit.StartDate?.ToString("MMM dd, yyyy")</td>
                                    <td>@benefit.EndDate?.ToString("MMM dd, yyyy")</td>
                                    <td class="text-end">
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-primary" @onclick="() => EditBenefit(benefit)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-outline-danger" @onclick="() => DeleteBenefit(benefit)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="d-flex justify-content-between align-items-center p-3 border-top">
                    <div class="text-muted">
                        Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalItems) of @totalItems benefits
                    </div>
                    <nav>
                        <ul class="pagination pagination-sm mb-0">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                            </li>
                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                            {
                                <li class="page-item @(currentPage == i ? "active" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                </li>
                            }
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                            </li>
                        </ul>
                    </nav>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <div class="text-muted">
                        <i class="bi bi-gift fs-1 d-block mb-3"></i>
                        <h5>No benefits found</h5>
                        <p>No benefits match your current filters.</p>
                        <button class="btn btn-primary" @onclick="OpenCreateModal">
                            <i class="bi bi-plus-circle me-2"></i>Add First Benefit
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Create/Edit Modal -->
<div class="modal fade @(showModal ? "show d-block" : "")" tabindex="-1" style="@(showModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-gift me-2"></i>
                    @(isEditMode ? "Edit Benefit" : "Add New Benefit")
                </h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="currentBenefit" OnValidSubmit="SaveBenefit">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Employee</label>
                                <select class="form-select" @bind="currentBenefit.Employee_ID" required>
                                    <option value="">Select Employee</option>
                                    @foreach (var employee in employees)
                                    {
                                        <option value="@employee.Employee_ID">@employee.FirstName @employee.LastName</option>
                                    }
                                </select>
                                <ValidationMessage For="@(() => currentBenefit.Employee_ID)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Benefit Type</label>
                                <select class="form-select" @bind="currentBenefit.BenefitType" required>
                                    <option value="">Select Type</option>
                                    <option value="Health Insurance">Health Insurance</option>
                                    <option value="Dental Insurance">Dental Insurance</option>
                                    <option value="Vision Insurance">Vision Insurance</option>
                                    <option value="Life Insurance">Life Insurance</option>
                                    <option value="Retirement Plan">Retirement Plan</option>
                                    <option value="Paid Time Off">Paid Time Off</option>
                                    <option value="Other">Other</option>
                                </select>
                                <ValidationMessage For="@(() => currentBenefit.BenefitType)" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Provider</label>
                                <InputText class="form-control" @bind-Value="currentBenefit.Provider" required />
                                <ValidationMessage For="@(() => currentBenefit.Provider)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Cost</label>
                                <InputNumber class="form-control" @bind-Value="currentBenefit.Cost" required />
                                <ValidationMessage For="@(() => currentBenefit.Cost)" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Start Date</label>
                                <InputDate class="form-control" @bind-Value="currentBenefit.StartDate" />
                                <ValidationMessage For="@(() => currentBenefit.StartDate)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">End Date</label>
                                <InputDate class="form-control" @bind-Value="currentBenefit.EndDate" />
                                <ValidationMessage For="@(() => currentBenefit.EndDate)" />
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <InputTextArea class="form-control" rows="3" @bind-Value="currentBenefit.Description" />
                        <ValidationMessage For="@(() => currentBenefit.Description)" />
                    </div>
                    <div class="text-end">
                        <button type="button" class="btn btn-secondary me-2" @onclick="CloseModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-check-circle me-2"></i>
                            @(isEditMode ? "Update" : "Create") Benefit
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private List<BenefitResponse> benefits = new();
    private List<BenefitResponse> pagedBenefits = new();
    private List<EmployeeResponse> employees = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditMode = false;
    private string searchQuery = "";
    private string selectedBenefitType = "";
    private string selectedEmployee = "";
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalItems = 0;
    
    // Stats
    private int totalBenefits = 0;
    private int enrolledEmployees = 0;
    private decimal totalCost = 0;
    private decimal enrollmentRate = 0;
    
    private BenefitRequest currentBenefit = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await LoadEmployees();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            var query = $"/api/benefits?page={currentPage}&pageSize={pageSize}";
            if (!string.IsNullOrEmpty(searchQuery))
                query += $"&q={Uri.EscapeDataString(searchQuery)}";
            if (!string.IsNullOrEmpty(selectedEmployee))
                query += $"&employeeId={selectedEmployee}";

            var response = await Http.GetFromJsonAsync<BenefitListResponse>(query);
            benefits = response?.Items ?? new();
            totalItems = response?.Total ?? 0;
            totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
            
            UpdatePagedData();
            CalculateStats();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading benefits: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadEmployees()
    {
        try
        {
            employees = await Http.GetFromJsonAsync<List<EmployeeResponse>>("/api/employees") ?? new();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading employees: {ex.Message}");
        }
    }

    private void UpdatePagedData()
    {
        var filteredBenefits = benefits.AsQueryable();
        
        if (!string.IsNullOrEmpty(selectedBenefitType))
            filteredBenefits = filteredBenefits.Where(b => b.BenefitType == selectedBenefitType);
            
        pagedBenefits = filteredBenefits.ToList();
    }

    private void CalculateStats()
    {
        totalBenefits = benefits.Count;
        enrolledEmployees = benefits.Select(b => b.Employee_ID).Distinct().Count();
        totalCost = benefits.Sum(b => b.Cost);
        enrollmentRate = employees.Count > 0 ? (decimal)enrolledEmployees / employees.Count : 0;
    }

    private async Task OnSearchChanged()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadData();
        }
    }

    private void OpenCreateModal()
    {
        currentBenefit = new BenefitRequest();
        isEditMode = false;
        showModal = true;
    }

    private void EditBenefit(BenefitResponse benefit)
    {
        currentBenefit = new BenefitRequest
        {
            Benefit_ID = benefit.Benefit_ID,
            Employee_ID = benefit.Employee_ID,
            BenefitType = benefit.BenefitType,
            Provider = benefit.Provider,
            Cost = benefit.Cost,
            StartDate = benefit.StartDate ?? DateTime.MinValue,
            EndDate = benefit.EndDate ?? DateTime.MinValue,
            Description = benefit.Description ?? string.Empty
        };
        isEditMode = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentBenefit = new();
    }

    private async Task SaveBenefit()
    {
        try
        {
            if (isEditMode)
            {
                await Http.PutAsJsonAsync($"/api/benefits/{currentBenefit.Benefit_ID}", currentBenefit);
                await JSRuntime.InvokeVoidAsync("alert", "Benefit updated successfully!");
            }
            else
            {
                await Http.PostAsJsonAsync("/api/benefits", currentBenefit);
                await JSRuntime.InvokeVoidAsync("alert", "Benefit created successfully!");
            }
            
            CloseModal();
            await LoadData();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving benefit: {ex.Message}");
        }
    }

    private async Task DeleteBenefit(BenefitResponse benefit)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this benefit for {benefit.EmployeeName}?"))
        {
            try
            {
                await Http.DeleteAsync($"/api/benefits/{benefit.Benefit_ID}");
                await JSRuntime.InvokeVoidAsync("alert", "Benefit deleted successfully!");
                await LoadData();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting benefit: {ex.Message}");
            }
        }
    }

    public class BenefitResponse
    {
        public int Benefit_ID { get; set; }
        public int Employee_ID { get; set; }
        public string EmployeeName { get; set; } = "";
        public string BenefitType { get; set; } = "";
        public string Provider { get; set; } = "";
        public decimal Cost { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public string? Description { get; set; }
    }

    public class BenefitListResponse
    {
        public List<BenefitResponse> Items { get; set; } = new();
        public int Total { get; set; }
        public int Page { get; set; }
        public int PageSize { get; set; }
    }
}            