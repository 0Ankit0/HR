@page "/policies"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using global::HR.Models
@using System.Text.Json
@using System.Text
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 text-primary fw-bold mb-0">
                        <i class="bi bi-file-text me-2"></i>Policy Management
                    </h1>
                    <p class="text-muted mb-0">Manage company policies and procedures</p>
                </div>
                <button class="btn btn-primary" @onclick="OpenCreateModal">
                    <i class="bi bi-plus-circle me-2"></i>Create Policy
                </button>
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-primary bg-opacity-10 p-3 rounded">
                                <i class="bi bi-file-text text-primary fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@totalPolicies</div>
                            <div class="text-muted small">Total Policies</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-success bg-opacity-10 p-3 rounded">
                                <i class="bi bi-check-circle text-success fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@activePolicies</div>
                            <div class="text-muted small">Active</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-warning bg-opacity-10 p-3 rounded">
                                <i class="bi bi-clock text-warning fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@draftPolicies</div>
                            <div class="text-muted small">Draft</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-info bg-opacity-10 p-3 rounded">
                                <i class="bi bi-arrow-clockwise text-info fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@recentlyUpdated</div>
                            <div class="text-muted small">Recently Updated</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="row mb-3">
        <div class="col-md-3">
            <select class="form-select" @value="selectedCategory" @onchange="OnFilterChanged">
                <option value="">All Categories</option>
                <option value="HR">HR Policies</option>
                <option value="Safety">Safety</option>
                <option value="IT">IT & Security</option>
                <option value="Finance">Finance</option>
                <option value="Operations">Operations</option>
                <option value="Compliance">Compliance</option>
                <option value="Other">Other</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="selectedStatus" @bind:after="OnFilterChanged">
                <option value="">All Statuses</option>
                <option value="Active">Active</option>
                <option value="Draft">Draft</option>
                <option value="Under Review">Under Review</option>
                <option value="Archived">Archived</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="selectedPriority" @bind:after="OnFilterChanged">
                <option value="">All Priorities</option>
                <option value="High">High</option>
                <option value="Medium">Medium</option>
                <option value="Low">Low</option>
            </select>
        </div>
        <div class="col-md-3">
            <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                    <i class="bi bi-search text-muted"></i>
                </span>
                <input type="text" class="form-control border-start-0" 
                       placeholder="Search policies..." 
                       @bind="searchQuery" @onkeyup="OnSearchChanged" />
            </div>
        </div>
    </div>

    <!-- Policies Table -->
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div class="mt-2 text-muted">Loading policies...</div>
                </div>
            }
            else if (policies.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th class="border-0 fw-semibold">Policy</th>
                                <th class="border-0 fw-semibold">Category</th>
                                <th class="border-0 fw-semibold">Version</th>
                                <th class="border-0 fw-semibold">Status</th>
                                <th class="border-0 fw-semibold">Last Updated</th>
                                <th class="border-0 fw-semibold">Next Review</th>
                                <th class="border-0 fw-semibold text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var policy in pagedPolicies)
                            {
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="bg-primary bg-opacity-10 rounded p-2 me-3">
                                                <i class="bi bi-file-text text-primary"></i>
                                            </div>
                                            <div>
                                                <div class="fw-semibold">@policy.Title</div>
                                                <div class="text-muted small">@policy.PolicyNumber</div>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge bg-info bg-opacity-10 text-info px-3 py-2">
                                            @policy.Category
                                        </span>
                                    </td>
                                    <td class="fw-semibold">v@policy.Version</td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(policy.Status) px-3 py-2">
                                            @policy.Status
                                        </span>
                                    </td>
                                    <td>
                                        <div>@policy.LastUpdated?.ToString("MMM dd, yyyy")</div>
                                        <div class="text-muted small">@policy.UpdatedBy</div>
                                    </td>
                                    <td>
                                        <div>@policy.NextReviewDate?.ToString("MMM dd, yyyy")</div>
                                        @if (policy.NextReviewDate < DateTime.Now)
                                        {
                                            <div class="text-danger small">
                                                <i class="bi bi-exclamation-triangle me-1"></i>Overdue
                                            </div>
                                        }
                                    </td>
                                    <td class="text-end">
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-info" @onclick="() => ViewPolicy(policy)">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            <button class="btn btn-outline-primary" @onclick="() => EditPolicy(policy)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-outline-success" @onclick="() => DownloadPolicy(policy)">
                                                <i class="bi bi-download"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="d-flex justify-content-between align-items-center p-3 border-top">
                    <div class="text-muted">
                        Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalItems) of @totalItems policies
                    </div>
                    <nav>
                        <ul class="pagination pagination-sm mb-0">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                            </li>
                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                            {
                                <li class="page-item @(currentPage == i ? "active" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                </li>
                            }
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                            </li>
                        </ul>
                    </nav>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <div class="text-muted">
                        <i class="bi bi-file-text fs-1 d-block mb-3"></i>
                        <h5>No policies found</h5>
                        <p>No policies match your current filters.</p>
                        <button class="btn btn-primary" @onclick="OpenCreateModal">
                            <i class="bi bi-plus-circle me-2"></i>Create First Policy
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Create/Edit Modal -->
<div class="modal fade @(showModal ? "show d-block" : "")" tabindex="-1" style="@(showModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-file-text me-2"></i>
                    @(isEditMode ? "Edit Policy" : "Create New Policy")
                </h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="currentPolicy" OnValidSubmit="SavePolicy">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Policy Title</label>
                                <InputText class="form-control" @bind-Value="currentPolicy.Title" required />
                                <ValidationMessage For="@(() => currentPolicy.Title)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Policy Number</label>
                                <InputText class="form-control" @bind-Value="currentPolicy.PolicyNumber" required />
                                <ValidationMessage For="@(() => currentPolicy.PolicyNumber)" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Category</label>
                                <select class="form-select" @bind="currentPolicy.Category" required>
                                    <option value="">Select Category</option>
                                    <option value="HR">HR Policies</option>
                                    <option value="Safety">Safety</option>
                                    <option value="IT">IT & Security</option>
                                    <option value="Finance">Finance</option>
                                    <option value="Operations">Operations</option>
                                    <option value="Compliance">Compliance</option>
                                    <option value="Other">Other</option>
                                </select>
                                <ValidationMessage For="@(() => currentPolicy.Category)" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Status</label>
                                <select class="form-select" @bind="currentPolicy.Status">
                                    <option value="Draft">Draft</option>
                                    <option value="Under Review">Under Review</option>
                                    <option value="Active">Active</option>
                                    <option value="Archived">Archived</option>
                                </select>
                                <ValidationMessage For="@(() => currentPolicy.Status)" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Version</label>
                                <InputText class="form-control" @bind-Value="currentPolicy.Version" required />
                                <ValidationMessage For="@(() => currentPolicy.Version)" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Effective Date</label>
                                <InputDate class="form-control" @bind-Value="currentPolicy.EffectiveDate" />
                                <ValidationMessage For="@(() => currentPolicy.EffectiveDate)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Next Review Date</label>
                                <InputDate class="form-control" @bind-Value="currentPolicy.NextReviewDate" />
                                <ValidationMessage For="@(() => currentPolicy.NextReviewDate)" />
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Summary</label>
                        <InputTextArea class="form-control" rows="3" @bind-Value="currentPolicy.Summary" />
                        <ValidationMessage For="@(() => currentPolicy.Summary)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Content</label>
                        <InputTextArea class="form-control" rows="8" @bind-Value="currentPolicy.Content" required />
                        <ValidationMessage For="@(() => currentPolicy.Content)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Approval Notes</label>
                        <InputTextArea class="form-control" rows="3" @bind-Value="currentPolicy.ApprovalNotes" />
                        <ValidationMessage For="@(() => currentPolicy.ApprovalNotes)" />
                    </div>
                    <div class="text-end">
                        <button type="button" class="btn btn-secondary me-2" @onclick="CloseModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-check-circle me-2"></i>
                            @(isEditMode ? "Update" : "Create") Policy
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private List<PolicyResponse> policies = new();
    private List<PolicyResponse> pagedPolicies = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditMode = false;
    private string searchQuery = "";
    private string selectedCategory = "";
    private string selectedStatus = "";
    private string selectedPriority = "";
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalItems = 0;
    
    // Stats
    private int totalPolicies = 0;
    private int activePolicies = 0;
    private int draftPolicies = 0;
    private int recentlyUpdated = 0;
    
    private PolicyRequest currentPolicy = new();
    private int editingId = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            var query = $"/api/policies?page={currentPage}&pageSize={pageSize}";
            if (!string.IsNullOrEmpty(searchQuery))
                query += $"&q={Uri.EscapeDataString(searchQuery)}";
            if (!string.IsNullOrEmpty(selectedCategory))
                query += $"&category={Uri.EscapeDataString(selectedCategory)}";
            if (!string.IsNullOrEmpty(selectedStatus))
                query += $"&status={Uri.EscapeDataString(selectedStatus)}";

            var response = await Http.GetFromJsonAsync<PolicyListResponse>(query);
            policies = response?.Items ?? new();
            totalItems = response?.Total ?? 0;
            totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
            
            UpdatePagedData();
            CalculateStats();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading policies: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void UpdatePagedData()
    {
        var filteredPolicies = policies.AsQueryable();
        
        if (!string.IsNullOrEmpty(selectedPriority))
            filteredPolicies = filteredPolicies.Where(p => p.Priority == selectedPriority);
            
        pagedPolicies = filteredPolicies.ToList();
    }

    private void CalculateStats()
    {
        totalPolicies = policies.Count;
        activePolicies = policies.Count(p => p.Status == "Active");
        draftPolicies = policies.Count(p => p.Status == "Draft");
        recentlyUpdated = policies.Count(p => p.LastUpdated >= DateTime.Now.AddDays(-30));
    }

    private async Task OnSearchChanged()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task OnFilterChanged()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadData();
        }
    }

    private void OpenCreateModal()
    {
        currentPolicy = new PolicyRequest { Status = "Draft", Version = "1.0", EffectiveDate = DateTime.Now };
        editingId = 0;
        isEditMode = false;
        showModal = true;
    }

    private void EditPolicy(PolicyResponse policy)
    {
        currentPolicy = new PolicyRequest
        {
            Title = policy.Title,
            PolicyNumber = policy.PolicyNumber,
            Category = policy.Category,
            Status = policy.Status,
            Version = policy.Version,
            EffectiveDate = policy.EffectiveDate,
            NextReviewDate = policy.NextReviewDate,
            Summary = policy.Summary ?? string.Empty,
            Content = policy.Content ?? string.Empty,
            ApprovalNotes = policy.ApprovalNotes ?? string.Empty
        };
        editingId = policy.Policy_ID;
        isEditMode = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentPolicy = new PolicyRequest();
        editingId = 0;
    }

    private async Task SavePolicy()
    {
        try
        {
            if (isEditMode)
            {
                await Http.PutAsJsonAsync($"/api/policies/{editingId}", currentPolicy);
                await JSRuntime.InvokeVoidAsync("alert", "Policy updated successfully!");
            }
            else
            {
                await Http.PostAsJsonAsync("/api/policies", currentPolicy);
                await JSRuntime.InvokeVoidAsync("alert", "Policy created successfully!");
            }
            
            CloseModal();
            await LoadData();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving policy: {ex.Message}");
        }
    }

    private async Task ViewPolicy(PolicyResponse policy)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Policy Details:\n\nTitle: {policy.Title}\nNumber: {policy.PolicyNumber}\nCategory: {policy.Category}\nStatus: {policy.Status}\nVersion: {policy.Version}\n\nSummary: {policy.Summary}");
    }

    private async Task DownloadPolicy(PolicyResponse policy)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("open", $"/api/policies/{policy.Policy_ID}/download", "_blank");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error downloading policy: {ex.Message}");
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Active" => "bg-success bg-opacity-10 text-success",
            "Draft" => "bg-warning bg-opacity-10 text-warning",
            "Under Review" => "bg-info bg-opacity-10 text-info",
            "Archived" => "bg-secondary bg-opacity-10 text-secondary",
            _ => "bg-light text-dark"
        };
    }
}
