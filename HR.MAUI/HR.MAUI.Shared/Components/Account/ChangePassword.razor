@page "/account/changepassword"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization

<h1>Change Password</h1>
<EditForm Model="changePasswordModel" OnValidSubmit="HandleChangePassword">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-floating mb-3">
        <InputText id="oldPassword" @bind-Value="changePasswordModel.OldPassword" class="form-control" type="password" placeholder="Current password" />
        <label for="oldPassword">Current password</label>
    </div>
    <div class="form-floating mb-3">
        <InputText id="newPassword" @bind-Value="changePasswordModel.NewPassword" class="form-control" type="password" placeholder="New password" />
        <label for="newPassword">New password</label>
    </div>
    <div class="form-floating mb-3">
        <InputText id="confirmPassword" @bind-Value="changePasswordModel.ConfirmPassword" class="form-control" type="password" placeholder="Confirm new password" />
        <label for="confirmPassword">Confirm new password</label>
    </div>
    <button type="submit" class="w-100 btn btn-lg btn-primary">Change Password</button>
</EditForm>
@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info mt-2">@statusMessage</div>
}

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;
    private ChangePasswordModel changePasswordModel = new();
    private string? statusMessage;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync("/api/password/has-password");
        if (response.IsSuccessStatusCode)
        {
            var hasPassword = bool.Parse(await response.Content.ReadAsStringAsync());
            if (!hasPassword)
            {
                NavigationManager.NavigateTo("/account/setpassword", true);
            }
        }
        else
        {
            statusMessage = "Unable to determine password status.";
        }
    }

    private async Task HandleChangePassword()
    {
        statusMessage = string.Empty;

        if (!ValidateModel())
            return;

        var payload = new {
            OldPassword = changePasswordModel.OldPassword,
            NewPassword = changePasswordModel.NewPassword
        };
        var response = await Http.PostAsJsonAsync("api/password/change", payload);
        if (response.IsSuccessStatusCode)
        {
            statusMessage = "Your password has been changed and your sign-in has been refreshed.";
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            statusMessage = $"Error: {error}";
        }
    }

    private bool ValidateModel()
    {
        if (string.IsNullOrWhiteSpace(changePasswordModel.NewPassword) || changePasswordModel.NewPassword.Length < 6)
        {
            statusMessage = "The new password must be at least 6 characters long.";
            return false;
        }
        if (changePasswordModel.NewPassword.Length > 100)
        {
            statusMessage = "The new password must be at most 100 characters long.";
            return false;
        }
        if (changePasswordModel.NewPassword != changePasswordModel.ConfirmPassword)
        {
            statusMessage = "The new password and confirmation password do not match.";
            return false;
        }
        return true;
    }

    public class ChangePasswordModel
    {
        [Required]
        [DataType(DataType.Password)]
        public string? OldPassword { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The new password must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Compare(nameof(NewPassword), ErrorMessage = "The new password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; }
    }
}
