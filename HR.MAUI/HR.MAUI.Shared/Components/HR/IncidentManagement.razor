@page "/incidents"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using global::HR.Models
@using System.Text.Json
@using System.Text
@using Microsoft.JSInterop

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 text-primary fw-bold mb-0">
                        <i class="bi bi-shield-exclamation me-2"></i>Incident Management
                    </h1>
                    <p class="text-muted mb-0">Track and manage workplace incidents</p>
                </div>
                <button class="btn btn-primary" @onclick="OpenCreateModal">
                    <i class="bi bi-plus-circle me-2"></i>Report Incident
                </button>
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-danger bg-opacity-10 p-3 rounded">
                                <i class="bi bi-shield-exclamation text-danger fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@totalIncidents</div>
                            <div class="text-muted small">Total Incidents</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-warning bg-opacity-10 p-3 rounded">
                                <i class="bi bi-clock text-warning fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@openIncidents</div>
                            <div class="text-muted small">Open</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-info bg-opacity-10 p-3 rounded">
                                <i class="bi bi-arrow-repeat text-info fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@inProgressIncidents</div>
                            <div class="text-muted small">In Progress</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-success bg-opacity-10 p-3 rounded">
                                <i class="bi bi-check-circle text-success fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@closedIncidents</div>
                            <div class="text-muted small">Closed</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="row mb-3">
        <div class="col-md-3">
            <select class="form-select" value="@selectedStatus" onchange="@(async (ChangeEventArgs e) => { selectedStatus = e.Value?.ToString() ?? ""; await OnFilterChanged(); })">
                <option value="">All Statuses</option>
                <option value="Open">Open</option>
                <option value="In Progress">In Progress</option>
                <option value="Under Investigation">Under Investigation</option>
                <option value="Resolved">Resolved</option>
                <option value="Closed">Closed</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" value="@selectedSeverity" onchange="@(async (ChangeEventArgs e) => { selectedSeverity = e.Value?.ToString() ?? ""; await OnFilterChanged(); })">
                <option value="">All Severity Levels</option>
                <option value="Low">Low</option>
                <option value="Medium">Medium</option>
                <option value="High">High</option>
                <option value="Critical">Critical</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" value="@selectedType" onchange="@(async (ChangeEventArgs e) => { selectedType = e.Value?.ToString() ?? ""; await OnFilterChanged(); })">
                <option value="">All Types</option>
                <option value="Safety Incident">Safety Incident</option>
                <option value="Security Breach">Security Breach</option>
                <option value="Policy Violation">Policy Violation</option>
                <option value="Equipment Damage">Equipment Damage</option>
                <option value="Injury">Injury</option>
                <option value="Other">Other</option>
            </select>
        </div>
        <div class="col-md-3">
            <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                    <i class="bi bi-search text-muted"></i>
                </span>
                <input type="text" class="form-control border-start-0" 
                       placeholder="Search incidents..." 
                       @bind="searchQuery" @onkeyup="OnSearchChanged" />
            </div>
        </div>
    </div>

    <!-- Incidents Table -->
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div class="mt-2 text-muted">Loading incidents...</div>
                </div>
            }
            else if (incidents.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th class="border-0 fw-semibold">ID</th>
                                <th class="border-0 fw-semibold">Reporter</th>
                                <th class="border-0 fw-semibold">Type</th>
                                <th class="border-0 fw-semibold">Severity</th>
                                <th class="border-0 fw-semibold">Status</th>
                                <th class="border-0 fw-semibold">Date</th>
                                <th class="border-0 fw-semibold text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var incident in pagedIncidents)
                            {
                                <tr>
                                    <td class="fw-semibold text-primary">#@incident.Incident_ID</td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="bg-primary bg-opacity-10 rounded-circle p-2 me-3">
                                                <i class="bi bi-person text-primary"></i>
                                            </div>
                                            <div>
                                                <div class="fw-semibold">@incident.ReporterName</div>
                                                <div class="text-muted small">ID: @incident.ReportedBy</div>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge bg-info bg-opacity-10 text-info px-3 py-2">
                                            @incident.IncidentType
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge @GetSeverityBadgeClass(incident.Severity) px-3 py-2">
                                            @incident.Severity
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(incident.Status) px-3 py-2">
                                            @incident.Status
                                        </span>
                                    </td>
                                    <td>
                                        <div>@incident.IncidentDate?.ToString("MMM dd, yyyy")</div>
                                        <div class="text-muted small">@incident.IncidentDate?.ToString("hh:mm tt")</div>
                                    </td>
                                    <td class="text-end">
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-info" @onclick="() => ViewIncident(incident)">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            <button class="btn btn-outline-primary" @onclick="() => EditIncident(incident)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-outline-success" @onclick="() => UpdateStatus(incident)">
                                                <i class="bi bi-arrow-up-circle"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="d-flex justify-content-between align-items-center p-3 border-top">
                    <div class="text-muted">
                        Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalItems) of @totalItems incidents
                    </div>
                    <nav>
                        <ul class="pagination pagination-sm mb-0">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                            </li>
                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                            {
                                <li class="page-item @(currentPage == i ? "active" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                </li>
                            }
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                            </li>
                        </ul>
                    </nav>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <div class="text-muted">
                        <i class="bi bi-shield-exclamation fs-1 d-block mb-3"></i>
                        <h5>No incidents found</h5>
                        <p>No incidents match your current filters.</p>
                        <button class="btn btn-primary" @onclick="OpenCreateModal">
                            <i class="bi bi-plus-circle me-2"></i>Report First Incident
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Create/Edit Modal -->
<div class="modal fade @(showModal ? "show d-block" : "")" tabindex="-1" style="@(showModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-shield-exclamation me-2"></i>
                    @(isEditMode ? "Update Incident" : "Report New Incident")
                </h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <form @onsubmit="SaveIncident" @onsubmit:preventDefault="true">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Reporter</label>
                                <select class="form-select" @bind="currentIncident.ReportedBy" required>
                                    <option value="">Select Employee</option>
                                    @foreach (var employee in employees)
                                    {
                                        <option value="@employee.Employee_ID">@employee.FirstName @employee.LastName</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Incident Date</label>
                                <input type="datetime-local" class="form-control" @bind="currentIncident.IncidentDate" required />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Incident Type</label>
                                <select class="form-select" @bind="currentIncident.IncidentType" required>
                                    <option value="">Select Type</option>
                                    <option value="Safety Incident">Safety Incident</option>
                                    <option value="Security Breach">Security Breach</option>
                                    <option value="Policy Violation">Policy Violation</option>
                                    <option value="Equipment Damage">Equipment Damage</option>
                                    <option value="Injury">Injury</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Severity Level</label>
                                <select class="form-select" @bind="currentIncident.Severity" required>
                                    <option value="">Select Severity</option>
                                    <option value="Low">Low</option>
                                    <option value="Medium">Medium</option>
                                    <option value="High">High</option>
                                    <option value="Critical">Critical</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Status</label>
                                <select class="form-select" @bind="currentIncident.Status">
                                    <option value="Open">Open</option>
                                    <option value="In Progress">In Progress</option>
                                    <option value="Under Investigation">Under Investigation</option>
                                    <option value="Resolved">Resolved</option>
                                    <option value="Closed">Closed</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Location</label>
                                <input type="text" class="form-control" @bind="currentIncident.Location" />
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Title</label>
                        <input type="text" class="form-control" @bind="currentIncident.Title" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" rows="4" @bind="currentIncident.Description" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Actions Taken</label>
                        <textarea class="form-control" rows="3" @bind="currentIncident.ActionsTaken"></textarea>
                    </div>
                    <div class="text-end">
                        <button type="button" class="btn btn-secondary me-2" @onclick="CloseModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-check-circle me-2"></i>
                            @(isEditMode ? "Update" : "Submit") Incident
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@code {
    private List<IncidentResponse> incidents = new();
    private List<IncidentResponse> pagedIncidents = new();
    private List<EmployeeResponse> employees = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditMode = false;
    private string searchQuery = "";
    private string selectedStatus = "";
    private string selectedSeverity = "";
    private string selectedType = "";
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalItems = 0;
    
    // Stats
    private int totalIncidents = 0;
    private int openIncidents = 0;
    private int inProgressIncidents = 0;
    private int closedIncidents = 0;
    
    private IncidentRequest currentIncident = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await LoadEmployees();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            var query = $"/api/incidents?page={currentPage}&pageSize={pageSize}";
            if (!string.IsNullOrEmpty(searchQuery))
                query += $"&q={Uri.EscapeDataString(searchQuery)}";
            if (!string.IsNullOrEmpty(selectedStatus))
                query += $"&status={Uri.EscapeDataString(selectedStatus)}";

            var response = await Http.GetFromJsonAsync<IncidentListResponse>(query);
            incidents = response?.Items ?? new();
            totalItems = response?.Total ?? 0;
            totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
            
            UpdatePagedData();
            CalculateStats();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading incidents: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadEmployees()
    {
        try
        {
            employees = await Http.GetFromJsonAsync<List<EmployeeResponse>>("/api/employees") ?? new();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading employees: {ex.Message}");
        }
    }

    private void UpdatePagedData()
    {
        var filteredIncidents = incidents.AsQueryable();
        
        if (!string.IsNullOrEmpty(selectedSeverity))
            filteredIncidents = filteredIncidents.Where(i => i.Severity == selectedSeverity);
        if (!string.IsNullOrEmpty(selectedType))
            filteredIncidents = filteredIncidents.Where(i => i.IncidentType == selectedType);
            
        pagedIncidents = filteredIncidents.ToList();
    }

    private void CalculateStats()
    {
        totalIncidents = incidents.Count;
        openIncidents = incidents.Count(i => i.Status == "Open");
        inProgressIncidents = incidents.Count(i => i.Status == "In Progress" || i.Status == "Under Investigation");
        closedIncidents = incidents.Count(i => i.Status == "Resolved" || i.Status == "Closed");
    }

    private async Task OnSearchChanged()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task OnFilterChanged()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadData();
        }
    }

    private void OpenCreateModal()
    {
        currentIncident = new IncidentRequest { Status = "Open", IncidentDate = DateTime.Now };
        isEditMode = false;
        showModal = true;
    }

    private void EditIncident(IncidentResponse incident)
    {
        currentIncident = new IncidentRequest
        {
            Incident_ID = incident.Incident_ID,
            ReportedBy = incident.ReportedBy,
            IncidentDate = incident.IncidentDate,
            IncidentType = incident.IncidentType,
            Severity = incident.Severity,
            Status = incident.Status,
            Location = incident.Location,
            Title = incident.Title,
            Description = incident.Description,
            ActionsTaken = incident.ActionsTaken
        };
        isEditMode = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentIncident = new();
    }

    private async Task SaveIncident()
    {
        try
        {
            if (isEditMode)
            {
                await Http.PutAsJsonAsync($"/api/incidents/{currentIncident.Incident_ID}", currentIncident);
                await JSRuntime.InvokeVoidAsync("alert", "Incident updated successfully!");
            }
            else
            {
                await Http.PostAsJsonAsync("/api/incidents", currentIncident);
                await JSRuntime.InvokeVoidAsync("alert", "Incident reported successfully!");
            }
            
            CloseModal();
            await LoadData();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving incident: {ex.Message}");
        }
    }

    private async Task ViewIncident(IncidentResponse incident)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Incident Details:\n\nTitle: {incident.Title}\nType: {incident.IncidentType}\nSeverity: {incident.Severity}\nStatus: {incident.Status}\nLocation: {incident.Location}\nDescription: {incident.Description}");
    }

    private async Task UpdateStatus(IncidentResponse incident)
    {
        var newStatus = await JSRuntime.InvokeAsync<string>("prompt", "Enter new status:", incident.Status);
        if (!string.IsNullOrEmpty(newStatus))
        {
            try
            {
                var updateRequest = new { status = newStatus };
                await Http.PutAsJsonAsync($"/api/incidents/{incident.Incident_ID}/status", updateRequest);
                await JSRuntime.InvokeVoidAsync("alert", "Status updated successfully!");
                await LoadData();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error updating status: {ex.Message}");
            }
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Open" => "bg-danger bg-opacity-10 text-danger",
            "In Progress" => "bg-warning bg-opacity-10 text-warning",
            "Under Investigation" => "bg-info bg-opacity-10 text-info",
            "Resolved" => "bg-success bg-opacity-10 text-success",
            "Closed" => "bg-secondary bg-opacity-10 text-secondary",
            _ => "bg-light text-dark"
        };
    }

    private string GetSeverityBadgeClass(string severity)
    {
        return severity switch
        {
            "Low" => "bg-success bg-opacity-10 text-success",
            "Medium" => "bg-warning bg-opacity-10 text-warning",
            "High" => "bg-danger bg-opacity-10 text-danger",
            "Critical" => "bg-danger text-white",
            _ => "bg-light text-dark"
        };
    }
}
