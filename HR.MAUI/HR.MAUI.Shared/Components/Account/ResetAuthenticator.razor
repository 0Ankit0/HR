@page "/account/reset-authenticator"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

@if (!isAuthenticated)
{
    <p>You must be logged in to reset your authenticator.</p>
}
else
{
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert alert-info">@statusMessage</div>
    }
}

@code {
    private bool isAuthenticated = false;
    private string? statusMessage;
    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsAuthenticatedAsync();

        if (isAuthenticated)
        {
            statusMessage = null;

            var response = await Http.PostAsync($"/api/2fa/reset-authenticator", null);
            if (response.IsSuccessStatusCode)
            {
                statusMessage = "Your authenticator app key has been reset, you will need to configure your authenticator app using the new key.";
            }
            else
            {
                statusMessage = await response.Content.ReadAsStringAsync();
            }
        }
    }
    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/account/manage", forceLoad: true);
    }
}