@page "/hr/recognition-awards"
@using global::HR.Models
@using System.Text.Json
@using System.Text
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="card-title mb-0">Awards & Recognition</h3>
                    <button class="btn btn-primary" @onclick="ShowCreateModal">
                        <i class="fas fa-award"></i> Create Award
                    </button>
                </div>
                <div class="card-body">
                    <!-- Search and Filter Section -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-search"></i></span>
                                <input type="text" class="form-control" placeholder="Search awards..."
                                    @bind="searchTerm" @oninput="FilterAwards" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" @bind="selectedEmployeeFilter" @bind:after="FilterAwards">
                                <option value="">All Employees</option>
                                @foreach (var employee in employees)
                                {
                                    <option value="@employee.Employee_ID">@employee.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <input type="date" class="form-control" @bind="selectedDateFilter"
                                @bind:after="FilterAwards" placeholder="Filter by date" />
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-outline-secondary w-100" @onclick="ClearFilters">Clear
                                Filters</button>
                        </div>
                    </div>

                    <!-- Awards Table -->
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>Title</th>
                                    <th>Employee</th>
                                    <th>Description</th>
                                    <th>Date Awarded</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (filteredAwards?.Any() == true)
                                {
                                    @foreach (var award in filteredAwards)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-award text-warning me-2"></i>
                                                    <strong>@award.Title</strong>
                                                </div>
                                            </td>
                                            <td>
                                                @{
                                                    var employee = employees.FirstOrDefault(e => e.Employee_ID ==
                                                    award.Employee_ID);
                                                }
                                                @if (employee != null)
                                                {
                                                    <span>@employee.Name</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="text-truncate" style="max-width: 250px;" title="@award.Description">
                                                    @award.Description
                                                </div>
                                            </td>
                                            <td>@award.DateAwarded.ToString("yyyy-MM-dd")</td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-info"
                                                        @onclick="() => ShowViewModal(award)">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-primary"
                                                        @onclick="() => ShowEditModal(award)">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger"
                                                        @onclick="() => DeleteAward(award.Award_ID)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="5" class="text-center text-muted">No awards found</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Modal -->
<div class="modal fade @(showModal ? "show d-block" : "")" tabindex="-1"
    style="@(showModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(isEditing ? "Edit Award" : "Create Award")</h5>
                <button type="button" class="btn-close" @onclick="HideModal"></button>
            </div>
            <EditForm Model="currentAward" OnValidSubmit="SaveAward">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Award Title *</label>
                                <InputText class="form-control" @bind-Value="currentAward.Title"
                                    placeholder="Award title..." required />
                                <ValidationMessage For="@(() => currentAward.Title)" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Employee *</label>
                                <select class="form-select" @bind="currentAward.Employee_ID" required>
                                    <option value="0">Select Employee</option>
                                    @foreach (var employee in employees)
                                    {
                                        <option value="@employee.Employee_ID">@employee.Name</option>
                                    }
                                </select>
                                <ValidationMessage For="@(() => currentAward.Employee_ID)" class="text-danger" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Date Awarded *</label>
                                <InputDate class="form-control" @bind-Value="currentAward.DateAwarded" required />
                                <ValidationMessage For="@(() => currentAward.DateAwarded)" class="text-danger" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <InputTextArea class="form-control" @bind-Value="currentAward.Description" rows="4"
                                    placeholder="Award description..." />
                                <ValidationMessage For="@(() => currentAward.Description)" class="text-danger" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancel</button>
                    <button type="submit" class="btn btn-primary">@(isEditing ? "Update" : "Create") Award</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- View Modal -->
<div class="modal fade @(showViewModal ? "show d-block" : "")" tabindex="-1"
    style="@(showViewModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Award Details</h5>
                <button type="button" class="btn-close" @onclick="HideViewModal"></button>
            </div>
            <div class="modal-body">
                @if (viewAward != null)
                {
                    <div class="text-center mb-4">
                        <i class="fas fa-award fa-3x text-warning"></i>
                        <h3 class="mt-2">@viewAward.Title</h3>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Recipient:</strong>
                            @{
                                var emp = employees.FirstOrDefault(e => e.Employee_ID == viewAward.Employee_ID);
                            }
                            <p>@(emp?.Name ?? "Unknown")</p>
                        </div>
                        <div class="col-md-6">
                            <strong>Date Awarded:</strong>
                            <p>@viewAward.DateAwarded.ToString("yyyy-MM-dd")</p>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <strong>Description:</strong>
                            <div class="border rounded p-3 mt-2" style="background-color: #f8f9fa;">
                                @(viewAward.Description ?? "No description provided")
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideViewModal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<AwardResponse> awards = new();
    private List<AwardResponse> filteredAwards = new();
    private List<EmployeeResponse> employees = new();

    private AwardRequest currentAward = new();
    private AwardResponse? viewAward = null;
    private bool showModal = false;
    private bool showViewModal = false;
    private bool isEditing = false;
    private int editingId = 0;

    private string searchTerm = "";
    private string selectedEmployeeFilter = "";
    private string selectedDateFilter = "";

    public class ApiResponse
    {
        public int Total { get; set; }
        public int Page { get; set; }
        public int PageSize { get; set; }
        public List<AwardResponse> Items { get; set; } = new();
    }

    public class EmployeeApiResponse
    {
        public int Total { get; set; }
        public int Page { get; set; }
        public int PageSize { get; set; }
        public List<EmployeeResponse> Items { get; set; } = new();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            var awardsResponse = await Http.GetAsync("/api/awards");
            if (awardsResponse.IsSuccessStatusCode)
            {
                var awardsJson = await awardsResponse.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<ApiResponse>(awardsJson, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive
                = true
                });
                awards = result?.Items ?? new();
            }

            var employeesResponse = await Http.GetAsync("/api/employees");
            if (employeesResponse.IsSuccessStatusCode)
            {
                var employeesJson = await employeesResponse.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<EmployeeApiResponse>(employeesJson, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                employees = result?.Items ?? new();
            }

            FilterAwards();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading data: {ex.Message}");
        }
    }

    private void FilterAwards()
    {
        filteredAwards = awards.Where(a =>
        (string.IsNullOrEmpty(searchTerm) ||
        a.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
        (a.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
        employees.Any(e => e.Employee_ID == a.Employee_ID && e.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
        &&
        (string.IsNullOrEmpty(selectedEmployeeFilter) || a.Employee_ID.ToString() == selectedEmployeeFilter) &&
        (string.IsNullOrEmpty(selectedDateFilter) || a.DateAwarded.Date == DateTime.Parse(selectedDateFilter).Date)
        ).OrderByDescending(a => a.DateAwarded).ToList();

        StateHasChanged();
    }

    private void ClearFilters()
    {
        searchTerm = "";
        selectedEmployeeFilter = "";
        selectedDateFilter = "";
        FilterAwards();
    }

    private void ShowCreateModal()
    {
        currentAward = new AwardRequest { DateAwarded = DateTime.Today };
        editingId = 0;
        isEditing = false;
        showModal = true;
    }

    private void ShowEditModal(AwardResponse award)
    {
        currentAward = new AwardRequest
        {
            Title = award.Title,
            Description = award.Description,
            Employee_ID = award.Employee_ID,
            DateAwarded = award.DateAwarded
        };
        editingId = award.Award_ID;
        isEditing = true;
        showModal = true;
    }

    private void ShowViewModal(AwardResponse award)
    {
        viewAward = award;
        showViewModal = true;
    }

    private void HideModal()
    {
        showModal = false;
        currentAward = new();
    }

    private void HideViewModal()
    {
        showViewModal = false;
        viewAward = null;
    }

    private async Task SaveAward()
    {
        try
        {
            var json = JsonSerializer.Serialize(currentAward);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            HttpResponseMessage response;
            if (isEditing)
            {
                response = await Http.PutAsync($"/api/awards/{editingId}", content);
            }
            else
            {
                response = await Http.PostAsync("/api/awards", content);
            }

            if (response.IsSuccessStatusCode)
            {
                HideModal();
                await LoadData();
                await JSRuntime.InvokeVoidAsync("alert", $"Award {(isEditing ? "updated" : "created")} successfully!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error {(isEditing ? "updating" : "creating")} award.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private async Task DeleteAward(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this award?"))
        {
            try
            {
                var response = await Http.DeleteAsync($"/api/awards/{id}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadData();
                    await JSRuntime.InvokeVoidAsync("alert", "Award deleted successfully!");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error deleting award.");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
            }
        }
    }
}
