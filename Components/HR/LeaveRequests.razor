@page "/leave-requests"
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 text-primary fw-bold mb-0">
                        <i class="bi bi-calendar-x me-2"></i>Leave Requests
                    </h1>
                    <p class="text-muted mb-0">Manage employee leave requests and approvals</p>
                </div>
                <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/leave-requests/new"))">
                    <i class="bi bi-plus-circle me-2"></i>New Leave Request
                </button>
            </div>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="row g-4 mb-4">
        <div class="col-md-3">
            <div class="card border-0 shadow-sm border-start border-warning border-4">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="rounded-circle bg-warning bg-opacity-10 p-3">
                                <i class="bi bi-clock text-warning fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h6 class="card-title text-muted mb-0">Pending Approval</h6>
                            <h3 class="text-warning mb-0 fw-bold">@leaveRequests.Count(l => l.Status == "Pending")</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card border-0 shadow-sm border-start border-success border-4">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="rounded-circle bg-success bg-opacity-10 p-3">
                                <i class="bi bi-check-circle text-success fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h6 class="card-title text-muted mb-0">Approved</h6>
                            <h3 class="text-success mb-0 fw-bold">@leaveRequests.Count(l => l.Status == "Approved")</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card border-0 shadow-sm border-start border-danger border-4">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="rounded-circle bg-danger bg-opacity-10 p-3">
                                <i class="bi bi-x-circle text-danger fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h6 class="card-title text-muted mb-0">Rejected</h6>
                            <h3 class="text-danger mb-0 fw-bold">@leaveRequests.Count(l => l.Status == "Rejected")</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card border-0 shadow-sm border-start border-info border-4">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="rounded-circle bg-info bg-opacity-10 p-3">
                                <i class="bi bi-calendar-week text-info fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h6 class="card-title text-muted mb-0">This Month</h6>
                            <h3 class="text-info mb-0 fw-bold">@leaveRequests.Count(l => l.StartDate.Month == DateTime.Now.Month)</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="row g-3 align-items-end">
                        <div class="col-md-3">
                            <label class="form-label small fw-medium text-muted">Search</label>
                            <div class="input-group">
                                <span class="input-group-text bg-light border-end-0">
                                    <i class="bi bi-search text-muted"></i>
                                </span>
                                <input type="text" class="form-control border-start-0" 
                                       @bind="searchQuery" @oninput="OnSearchInput"
                                       placeholder="Search by employee name...">
                            </div>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label small fw-medium text-muted">Status</label>
                            <select class="form-select" value="@selectedStatus" @onchange="OnStatusFilterChange">
                                <option value="">All Status</option>
                                <option value="Pending">Pending</option>
                                <option value="Approved">Approved</option>
                                <option value="Rejected">Rejected</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label small fw-medium text-muted">Leave Type</label>
                            <select class="form-select" value="@selectedLeaveType" @onchange="OnLeaveTypeFilterChange">
                                <option value="">All Types</option>
                                <option value="Annual">Annual Leave</option>
                                <option value="Sick">Sick Leave</option>
                                <option value="Personal">Personal Leave</option>
                                <option value="Maternity">Maternity Leave</option>
                                <option value="Emergency">Emergency Leave</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label small fw-medium text-muted">Date Range</label>
                            <select class="form-select" value="@selectedDateRange" @onchange="OnDateRangeFilterChange">
                                <option value="">All Dates</option>
                                <option value="thisMonth">This Month</option>
                                <option value="nextMonth">Next Month</option>
                                <option value="thisQuarter">This Quarter</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <div class="d-grid gap-2 d-md-flex">
                                <button class="btn btn-outline-secondary" @onclick="ClearFilters">
                                    <i class="bi bi-x-circle me-1"></i>Clear
                                </button>
                                <button class="btn btn-outline-primary" @onclick="ExportLeaveReport">
                                    <i class="bi bi-download me-1"></i>Export
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <!-- Leave Requests Table -->
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-white border-0">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">Leave Requests</h5>
                    <div class="d-flex gap-2">
                        <button class="btn btn-outline-success btn-sm" @onclick="() => BulkApprove()">
                            <i class="bi bi-check-all me-1"></i>Bulk Approve
                        </button>
                        <button class="btn btn-outline-danger btn-sm" @onclick="() => BulkReject()">
                            <i class="bi bi-x-lg me-1"></i>Bulk Reject
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body p-0">
                @if (leaveRequests.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="bg-light">
                                <tr>
                                    <th class="border-0">
                                        <input type="checkbox" class="form-check-input" @onchange="SelectAllRequests">
                                    </th>
                                    <th class="border-0">Employee</th>
                                    <th class="border-0">Leave Type</th>
                                    <th class="border-0">Start Date</th>
                                    <th class="border-0">End Date</th>
                                    <th class="border-0">Days</th>
                                    <th class="border-0">Status</th>
                                    <th class="border-0">Requested Date</th>
                                    <th class="border-0">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var leave in leaveRequests.Take(20))
                                {
                                    <tr class="@(selectedRequests.Contains(leave.Leave_ID) ? "table-active" : "")">
                                        <td>
                                            <input type="checkbox" class="form-check-input" 
                                                   checked="@selectedRequests.Contains(leave.Leave_ID)"
                                                   @onchange="() => ToggleSelection(leave.Leave_ID)">
                                        </td>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="rounded-circle bg-primary bg-opacity-10 me-2 d-flex align-items-center justify-content-center" 
                                                     style="width: 32px; height: 32px;">
                                                    <i class="bi bi-person text-primary small"></i>
                                                </div>
                                                <div>
                                                    <div class="fw-medium">Employee @leave.Employee_ID</div>
                                                    <small class="text-muted">@leave.EmployeeName</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <span class="badge bg-@GetLeaveTypeColor(leave.LeaveType) bg-opacity-10 text-@GetLeaveTypeColor(leave.LeaveType) border border-@GetLeaveTypeColor(leave.LeaveType)">
                                                @leave.LeaveType
                                            </span>
                                        </td>
                                        <td>@leave.StartDate.ToString("MMM dd, yyyy")</td>
                                        <td>@leave.EndDate.ToString("MMM dd, yyyy")</td>
                                        <td>
                                            <span class="fw-medium">@((leave.EndDate - leave.StartDate).Days + 1)</span>
                                        </td>
                                        <td>
                                            <span class="badge bg-@GetStatusColor(leave.Status) bg-opacity-10 text-@GetStatusColor(leave.Status) border border-@GetStatusColor(leave.Status)">
                                                <i class="bi bi-@GetStatusIcon(leave.Status) me-1"></i>@leave.Status
                                            </span>
                                        </td>
                                        <td>
                                            <small class="text-muted">@leave.RequestDate.ToString("MMM dd, yyyy")</small>
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                <button class="btn btn-outline-primary" 
                                                        @onclick="() => ViewDetails(leave.Leave_ID)"
                                                        title="View Details">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                                @if (leave.Status == "Pending")
                                                {
                                                    <button class="btn btn-outline-success" 
                                                            @onclick="() => ApproveRequest(leave.Leave_ID)"
                                                            title="Approve">
                                                        <i class="bi bi-check"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger" 
                                                            @onclick="() => RejectRequest(leave.Leave_ID)"
                                                            title="Reject">
                                                        <i class="bi bi-x"></i>
                                                    </button>
                                                }
                                                <div class="dropdown">
                                                    <button class="btn btn-outline-secondary" type="button" 
                                                            data-bs-toggle="dropdown" aria-expanded="false">
                                                        <i class="bi bi-three-dots-vertical"></i>
                                                    </button>
                                                    <ul class="dropdown-menu">
                                                        <li><a class="dropdown-item" @onclick="() => ViewDetails(leave.Leave_ID)">
                                                            <i class="bi bi-eye me-2"></i>View Details</a></li>
                                                        <li><a class="dropdown-item" @onclick="() => EditRequest(leave.Leave_ID)">
                                                            <i class="bi bi-pencil me-2"></i>Edit</a></li>
                                                        <li><hr class="dropdown-divider"></li>
                                                        <li><a class="dropdown-item text-danger" @onclick="() => DeleteRequest(leave.Leave_ID)">
                                                            <i class="bi bi-trash me-2"></i>Delete</a></li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="bi bi-calendar-x text-muted" style="font-size: 4rem;"></i>
                        <h4 class="text-muted mt-3">No leave requests found</h4>
                        <p class="text-muted">Try adjusting your filters or create a new leave request.</p>
                        <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/leave-requests/new"))">
                            <i class="bi bi-plus-circle me-2"></i>Create Leave Request
                        </button>
                    </div>
                }
            </div>
        </div>

        <!-- Calendar View Toggle -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-white border-0">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">
                                <i class="bi bi-calendar3 me-2"></i>Leave Calendar
                            </h5>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary active">Month View</button>
                                <button class="btn btn-outline-primary">Week View</button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="text-center text-muted py-5">
                            <i class="bi bi-calendar3" style="font-size: 3rem;"></i>
                            <p class="mt-2">Calendar view will be implemented here</p>
                            <small>Shows leave requests in a visual calendar format</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .table-hover tbody tr:hover {
        background-color: rgba(13, 110, 253, 0.05);
    }
    
    .badge {
        font-size: 0.75rem;
        font-weight: 500;
    }
    
    .border-4 {
        border-width: 4px !important;
    }
</style>

@code {
    private List<LeaveRequestResponse> leaveRequests = new();
    private List<int> selectedRequests = new();
    private bool isLoading = true;
    private string searchQuery = "";
    private string selectedStatus = "";
    private string selectedLeaveType = "";
    private string selectedDateRange = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadLeaveRequests();
        isLoading = false;
    }

    private async Task LoadLeaveRequests()
    {
        try
        {
            var url = "/api/leaves";
            var queryParams = new List<string>();

            if (!string.IsNullOrEmpty(searchQuery))
                queryParams.Add($"q={Uri.EscapeDataString(searchQuery)}");
            
            if (!string.IsNullOrEmpty(selectedStatus))
                queryParams.Add($"status={selectedStatus}");
            
            if (!string.IsNullOrEmpty(selectedLeaveType))
                queryParams.Add($"leaveType={selectedLeaveType}");

            if (queryParams.Any())
                url += "?" + string.Join("&", queryParams);

            var response = await Http.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                leaveRequests = await response.Content.ReadFromJsonAsync<List<LeaveRequestResponse>>() ?? new();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading leave requests: {ex.Message}");
        }
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        await LoadLeaveRequests();
    }

    private async Task OnStatusFilterChange(ChangeEventArgs e)
    {
        selectedStatus = e.Value?.ToString() ?? "";
        await LoadLeaveRequests();
    }

    private async Task OnLeaveTypeFilterChange(ChangeEventArgs e)
    {
        selectedLeaveType = e.Value?.ToString() ?? "";
        await LoadLeaveRequests();
    }

    private async Task OnDateRangeFilterChange(ChangeEventArgs e)
    {
        selectedDateRange = e.Value?.ToString() ?? "";
        await LoadLeaveRequests();
    }

    private async Task OnFilterChange()
    {
        await LoadLeaveRequests();
    }

    private async Task ClearFilters()
    {
        searchQuery = "";
        selectedStatus = "";
        selectedLeaveType = "";
        selectedDateRange = "";
        await LoadLeaveRequests();
    }

    private void ToggleSelection(int leaveId)
    {
        if (selectedRequests.Contains(leaveId))
            selectedRequests.Remove(leaveId);
        else
            selectedRequests.Add(leaveId);
    }

    private void SelectAllRequests(ChangeEventArgs e)
    {
        var isChecked = (bool)(e.Value ?? false);
        selectedRequests.Clear();
        if (isChecked)
        {
            selectedRequests.AddRange(leaveRequests.Take(20).Select(l => l.Leave_ID));
        }
    }

    private async Task ApproveRequest(int leaveId)
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"/api/leaves/{leaveId}/approve", new { });
            if (response.IsSuccessStatusCode)
            {
                await LoadLeaveRequests();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error approving request: {ex.Message}");
        }
    }

    private async Task RejectRequest(int leaveId)
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"/api/leaves/{leaveId}/reject", new { });
            if (response.IsSuccessStatusCode)
            {
                await LoadLeaveRequests();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error rejecting request: {ex.Message}");
        }
    }

    private async Task BulkApprove()
    {
        if (!selectedRequests.Any()) return;
        
        try
        {
            var tasks = selectedRequests.Select(id => Http.PutAsJsonAsync($"/api/leaves/{id}/approve", new { }));
            await Task.WhenAll(tasks);
            selectedRequests.Clear();
            await LoadLeaveRequests();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error bulk approving: {ex.Message}");
        }
    }

    private async Task BulkReject()
    {
        if (!selectedRequests.Any()) return;
        
        try
        {
            var tasks = selectedRequests.Select(id => Http.PutAsJsonAsync($"/api/leaves/{id}/reject", new { }));
            await Task.WhenAll(tasks);
            selectedRequests.Clear();
            await LoadLeaveRequests();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error bulk rejecting: {ex.Message}");
        }
    }

    private void ViewDetails(int leaveId)
    {
        Navigation.NavigateTo($"/leave-requests/{leaveId}");
    }

    private void EditRequest(int leaveId)
    {
        Navigation.NavigateTo($"/leave-requests/{leaveId}/edit");
    }

    private async Task DeleteRequest(int leaveId)
    {
        try
        {
            var response = await Http.DeleteAsync($"/api/leaves/{leaveId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadLeaveRequests();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting request: {ex.Message}");
        }
    }

    private Task ExportLeaveReport()
    {
        Console.WriteLine("Exporting leave report...");
        return Task.CompletedTask;
    }

    private string GetStatusColor(string status)
    {
        return status switch
        {
            "Pending" => "warning",
            "Approved" => "success",
            "Rejected" => "danger",
            _ => "secondary"
        };
    }

    private string GetStatusIcon(string status)
    {
        return status switch
        {
            "Pending" => "clock",
            "Approved" => "check-circle",
            "Rejected" => "x-circle",
            _ => "circle"
        };
    }

    private string GetLeaveTypeColor(string leaveType)
    {
        return leaveType switch
        {
            "Annual" => "primary",
            "Sick" => "danger",
            "Personal" => "info",
            "Maternity" => "success",
            "Emergency" => "warning",
            _ => "secondary"
        };
    }

    public class LeaveRequestResponse
    {
        public int Leave_ID { get; set; }
        public int Employee_ID { get; set; }
        public string EmployeeName { get; set; } = string.Empty;
        public string LeaveType { get; set; } = string.Empty;
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Status { get; set; } = string.Empty;
        public string Reason { get; set; } = string.Empty;
        public DateTime RequestDate { get; set; }
        public DateTime? ApprovalDate { get; set; }
        public string? ApprovedBy { get; set; }
        public string? Comments { get; set; }
    }
}
