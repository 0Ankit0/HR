@page "/account/generate-recovery-codes"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IAlertService AlertService

<button class="btn btn-link mb-3" type="button" @onclick="NavigateBack">
    <i class="bi bi-arrow-left"></i> Back
</button>
<h1>Generate two-factor authentication (2FA) recovery codes</h1>

@if (!isAuthenticated)
{
    <p>You must be logged in to generate recovery codes.</p>
}
else
{
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert alert-info">@statusMessage</div>
    }

    <div class="alert alert-warning" role="alert">
        <p>
            <strong>Put these codes in a safe place.</strong>
        </p>
        <p>
            If you lose your device and don't have the recovery codes you will lose access to your account.
        </p>
        <p>
            Generating new recovery codes does not change the keys used in authenticator apps. If you wish to change the key
            used in an authenticator app you should <a href="/account/resetauthenticator">reset your authenticator keys.</a>
        </p>
    </div>

    @if (isLoading)
    {
        <p>Loading...</p>
    }
    else if (!isTwoFactorEnabled)
    {
        <div class="alert alert-danger">You must enable two-factor authentication before generating recovery codes.</div>
    }
    else
    {
        <button class="btn btn-danger" @onclick="GenerateCodes" disabled="@isGenerating">Generate Recovery Codes</button>
    }

    @if (recoveryCodes?.Length > 0)
    {
        <div class="mt-4">
            <h4>Your new recovery codes</h4>
            <ul>
                @foreach (var recCode in recoveryCodes)
                {
                    <li>@recCode</li>
                }
            </ul>
            <div class="alert alert-info mt-2">
                Save these codes in a safe place. Each code can be used once.
            </div>
        </div>
    }
}

@code {
    private bool isLoading = true;
    private bool isGenerating = false;
    private bool isTwoFactorEnabled = false;
    private bool isAuthenticated = false;
    private string? statusMessage;
    private string[]? recoveryCodes;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            await CheckTwoFactorAsync();
        }
        else
        {
            isLoading = false;
        }
    }

    private async Task CheckTwoFactorAsync()
    {
        isLoading = true;
        statusMessage = null;
        recoveryCodes = null;
        var response = await Http.GetAsync("api/twofactor/enabled");
        if (response.IsSuccessStatusCode)
        {
            isTwoFactorEnabled = bool.Parse(await response.Content.ReadAsStringAsync());
        }
        else
        {
            statusMessage = "Unable to determine 2FA status.";
        }
        isLoading = false;
    }

    private async Task GenerateCodes()
    {
        isGenerating = true;
        statusMessage = null;
        recoveryCodes = null;
        var response = await Http.PostAsync("api/twofactor/generate-recovery-codes", null);
        if (response.IsSuccessStatusCode)
        {
            recoveryCodes = await response.Content.ReadFromJsonAsync<string[]>();
            statusMessage = "You have generated new recovery codes.";
        }
        else
        {
            statusMessage = await response.Content.ReadAsStringAsync();
        }
        isGenerating = false;
    }
    private async Task NavigateBack()
    {
        await AlertService.ShowAlert("Use your browser's back button to navigate back.");
    }
}