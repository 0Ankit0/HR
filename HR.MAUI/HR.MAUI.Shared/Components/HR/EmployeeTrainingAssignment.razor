@page "/hr/employee-training-assignments"
@using global::HR.Models
@using System.Text.Json
@using System.Text
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="card-title mb-0">Employee-Training Assignments</h3>
                    <button class="btn btn-primary" @onclick="ShowCreateModal">
                        <i class="fas fa-plus"></i> Assign Employee to Training
                    </button>
                </div>
                <div class="card-body">
                    <!-- Search and Filter Section -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-search"></i></span>
                                <input type="text" class="form-control" placeholder="Search assignments..." @bind="searchTerm" @oninput="FilterAssignments" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" @bind="selectedTrainingFilter" @bind:after="FilterAssignments">
                                <option value="">All Trainings</option>
                                @foreach (var training in trainings)
                                {
                                    <option value="@training.Training_ID">@training.Title</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" @bind="selectedEmployeeFilter" @bind:after="FilterAssignments">
                                <option value="">All Employees</option>
                                @foreach (var employee in employees)
                                {
                                    <option value="@employee.Employee_ID">@employee.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-outline-secondary w-100" @onclick="ClearFilters">Clear Filters</button>
                        </div>
                    </div>

                    <!-- Assignments Table -->
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>Employee</th>
                                    <th>Training</th>
                                    <th>Training Date</th>
                                    <th>Completion Date</th>
                                    <th>Score</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (filteredAssignments?.Any() == true)
                                {
                                    @foreach (var assignment in filteredAssignments)
                                    {
                                        <tr>
                                            <td>
                                                @{
                                                    var employee = employees.FirstOrDefault(e => e.Employee_ID == assignment.Employee_ID);
                                                }
                                                @if (employee != null)
                                                {
                                                    <span>@employee.Name</span>
                                                }
                                            </td>
                                            <td>
                                                @{
                                                    var training = trainings.FirstOrDefault(t => t.Training_ID == assignment.Training_ID);
                                                }
                                                @if (training != null)
                                                {
                                                    <span>@training.Title</span>
                                                }
                                            </td>
                                            <td>
                                                @{
                                                    var training2 = trainings.FirstOrDefault(t => t.Training_ID == assignment.Training_ID);
                                                }
                                                @if (training2 != null)
                                                {
                                                    <span>@training2.Date.ToString("yyyy-MM-dd")</span>
                                                }
                                            </td>
                                            <td>@(assignment.Completion_Date?.ToString("yyyy-MM-dd") ?? "Not Completed")</td>
                                            <td>@(assignment.Score?.ToString("F1") ?? "N/A")</td>
                                            <td>
                                                <span class="badge @(assignment.Completion_Date.HasValue ? "bg-success" : "bg-warning")">
                                                    @(assignment.Completion_Date.HasValue ? "Completed" : "In Progress")
                                                </span>
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowEditModal(assignment)">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteAssignment(assignment.Employee_Training_ID)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="7" class="text-center text-muted">No assignments found</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Modal -->
<div class="modal fade @(showModal ? "show d-block" : "")" tabindex="-1" style="@(showModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(isEditing ? "Edit Assignment" : "Assign Employee to Training")</h5>
                <button type="button" class="btn-close" @onclick="HideModal"></button>
            </div>
            <form @onsubmit="SaveAssignment" @onsubmit:preventDefault="true">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Employee *</label>
                                <select class="form-select" @bind="currentAssignment.Employee_ID" required>
                                    <option value="0">Select Employee</option>
                                    @foreach (var employee in employees)
                                    {
                                        <option value="@employee.Employee_ID">@employee.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Training *</label>
                                <select class="form-select" @bind="currentAssignment.Training_ID" required>
                                    <option value="0">Select Training</option>
                                    @foreach (var training in trainings)
                                    {
                                        <option value="@training.Training_ID">@training.Title</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Completion Date</label>
                                <input type="date" class="form-control" @bind="currentAssignment.Completion_Date" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Score</label>
                                <input type="number" class="form-control" @bind="currentAssignment.Score" placeholder="0.0" step="0.1" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancel</button>
                    <button type="submit" class="btn btn-primary">@(isEditing ? "Update" : "Create") Assignment</button>
                </div>
            </form>
        </div>
    </div>
</div>

@code {
    private List<EmployeeTrainingResponse> assignments = new();
    private List<EmployeeTrainingResponse> filteredAssignments = new();
    private List<EmployeeResponse> employees = new();
    private List<TrainingResponse> trainings = new();
    
    private EmployeeTrainingRequest currentAssignment = new();
    private bool showModal = false;
    private bool isEditing = false;
    
    private string searchTerm = "";
    private string selectedTrainingFilter = "";
    private string selectedEmployeeFilter = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            var assignmentsResponse = await Http.GetAsync("/api/employeetrainings");
            if (assignmentsResponse.IsSuccessStatusCode)
            {
                var assignmentsJson = await assignmentsResponse.Content.ReadAsStringAsync();
                assignments = JsonSerializer.Deserialize<List<EmployeeTrainingResponse>>(assignmentsJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new();
            }

            var employeesResponse = await Http.GetAsync("/api/employees");
            if (employeesResponse.IsSuccessStatusCode)
            {
                var employeesJson = await employeesResponse.Content.ReadAsStringAsync();
                employees = JsonSerializer.Deserialize<List<EmployeeResponse>>(employeesJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new();
            }

            var trainingsResponse = await Http.GetAsync("/api/trainings");
            if (trainingsResponse.IsSuccessStatusCode)
            {
                var trainingsJson = await trainingsResponse.Content.ReadAsStringAsync();
                trainings = JsonSerializer.Deserialize<List<TrainingResponse>>(trainingsJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new();
            }

            FilterAssignments();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading data: {ex.Message}");
        }
    }

    private void FilterAssignments()
    {
        filteredAssignments = assignments.Where(a =>
            (string.IsNullOrEmpty(searchTerm) || 
             employees.Any(e => e.Employee_ID == a.Employee_ID && e.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
             trainings.Any(t => t.Training_ID == a.Training_ID && t.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))) &&
            (string.IsNullOrEmpty(selectedTrainingFilter) || a.Training_ID.ToString() == selectedTrainingFilter) &&
            (string.IsNullOrEmpty(selectedEmployeeFilter) || a.Employee_ID.ToString() == selectedEmployeeFilter)
        ).ToList();
        
        StateHasChanged();
    }

    private void ClearFilters()
    {
        searchTerm = "";
        selectedTrainingFilter = "";
        selectedEmployeeFilter = "";
        FilterAssignments();
    }

    private void ShowCreateModal()
    {
        currentAssignment = new EmployeeTrainingRequest();
        isEditing = false;
        showModal = true;
    }

    private void ShowEditModal(EmployeeTrainingResponse assignment)
    {
        currentAssignment = new EmployeeTrainingRequest
        {
            Employee_Training_ID = assignment.Employee_Training_ID,
            Employee_ID = assignment.Employee_ID,
            Training_ID = assignment.Training_ID,
            Completion_Date = assignment.Completion_Date,
            Score = assignment.Score
        };
        isEditing = true;
        showModal = true;
    }

    private void HideModal()
    {
        showModal = false;
        currentAssignment = new EmployeeTrainingRequest();
    }

    private async Task SaveAssignment()
    {
        try
        {
            var json = JsonSerializer.Serialize(currentAssignment);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            
            HttpResponseMessage response;
            if (isEditing)
            {
                response = await Http.PutAsync($"/api/employeetrainings/{currentAssignment.Employee_Training_ID}", content);
            }
            else
            {
                response = await Http.PostAsync("/api/employeetrainings", content);
            }

            if (response.IsSuccessStatusCode)
            {
                HideModal();
                await LoadData();
                await JSRuntime.InvokeVoidAsync("alert", $"Assignment {(isEditing ? "updated" : "created")} successfully!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error {(isEditing ? "updating" : "creating")} assignment.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private async Task DeleteAssignment(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this assignment?"))
        {
            try
            {
                var response = await Http.DeleteAsync($"/api/employeetrainings/{id}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadData();
                    await JSRuntime.InvokeVoidAsync("alert", "Assignment deleted successfully!");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error deleting assignment.");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
            }
        }
    }
}
