@page "/wellness"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using global::HR.Models
@using System.Text.Json
@using System.Text
@using Microsoft.JSInterop

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 text-primary fw-bold mb-0">
                        <i class="bi bi-heart me-2"></i>Wellness Programs
                    </h1>
                    <p class="text-muted mb-0">Manage employee wellness and health programs</p>
                </div>
                <button class="btn btn-primary" @onclick="OpenCreateModal">
                    <i class="bi bi-plus-circle me-2"></i>Create Program
                </button>
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-primary bg-opacity-10 p-3 rounded">
                                <i class="bi bi-heart text-primary fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@totalPrograms</div>
                            <div class="text-muted small">Total Programs</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-success bg-opacity-10 p-3 rounded">
                                <i class="bi bi-play-circle text-success fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@activePrograms</div>
                            <div class="text-muted small">Active</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-info bg-opacity-10 p-3 rounded">
                                <i class="bi bi-people text-info fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@totalParticipants</div>
                            <div class="text-muted small">Participants</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-warning bg-opacity-10 p-3 rounded">
                                <i class="bi bi-percent text-warning fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="fw-bold fs-4">@participationRate.ToString("P1")</div>
                            <div class="text-muted small">Participation Rate</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="row mb-3">
        <div class="col-md-3">
            <select class="form-select" @bind="selectedCategory" @bind:after="OnFilterChanged">
                <option value="">All Categories</option>
                <option value="Mental Health">Mental Health</option>
                <option value="Physical Fitness">Physical Fitness</option>
                <option value="Nutrition">Nutrition</option>
                <option value="Stress Management">Stress Management</option>
                <option value="Work-Life Balance">Work-Life Balance</option>
                <option value="Preventive Care">Preventive Care</option>
                <option value="Other">Other</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="selectedStatus" @bind:after="OnFilterChanged">
                <option value="">All Statuses</option>
                <option value="Active">Active</option>
                <option value="Upcoming">Upcoming</option>
                <option value="Completed">Completed</option>
                <option value="Cancelled">Cancelled</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="selectedType" @bind:after="OnFilterChanged">
                <option value="">All Types</option>
                <option value="Workshop">Workshop</option>
                <option value="Program">Program</option>
                <option value="Challenge">Challenge</option>
                <option value="Seminar">Seminar</option>
                <option value="Resource">Resource</option>
            </select>
        </div>
        <div class="col-md-3">
            <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                    <i class="bi bi-search text-muted"></i>
                </span>
                <input type="text" class="form-control border-start-0" 
                       placeholder="Search programs..." 
                       @bind="searchQuery" @onkeyup="OnSearchChanged" />
            </div>
        </div>
    </div>

    <!-- Programs Grid -->
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="mt-2 text-muted">Loading wellness programs...</div>
        </div>
    }
    else if (programs.Any())
    {
        <div class="row">
            @foreach (var program in pagedPrograms)
            {
                <div class="col-lg-4 col-md-6 mb-4">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <div class="d-flex align-items-center">
                                    <div class="bg-primary bg-opacity-10 rounded p-2 me-3">
                                        <i class="bi bi-heart text-primary fs-5"></i>
                                    </div>
                                    <div>
                                        <h6 class="card-title mb-1">@program.ProgramName</h6>
                                        <span class="badge @GetCategoryBadgeClass(program.Category)">@program.Category</span>
                                    </div>
                                </div>
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                        <i class="bi bi-three-dots"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><button class="dropdown-item" @onclick="() => EditProgram(program)">
                                            <i class="bi bi-pencil me-2"></i>Edit
                                        </button></li>
                                        <li><button class="dropdown-item" @onclick="() => ViewParticipants(program)">
                                            <i class="bi bi-people me-2"></i>View Participants
                                        </button></li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li><button class="dropdown-item text-danger" @onclick="() => DeleteProgram(program)">
                                            <i class="bi bi-trash me-2"></i>Delete
                                        </button></li>
                                    </ul>
                                </div>
                            </div>
                            
                            <p class="card-text text-muted small">@program.Description</p>
                            
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-1">
                                    <span class="small text-muted">Participation</span>
                                    <span class="small fw-semibold">@program.ParticipantCount / @program.MaxParticipants</span>
                                </div>
                                <div class="progress" style="height: 6px;">
                                    <div class="progress-bar bg-success" style="width: @(program.MaxParticipants > 0 ? (program.ParticipantCount * 100 / program.MaxParticipants) : 0)%"></div>
                                </div>
                            </div>

                            <div class="row text-center small text-muted mb-3">
                                <div class="col-4">
                                    <i class="bi bi-calendar3 d-block mb-1"></i>
                                    @program.StartDate?.ToString("MMM dd")
                                </div>
                                <div class="col-4">
                                    <i class="bi bi-clock d-block mb-1"></i>
                                    @program.Duration
                                </div>
                                <div class="col-4">
                                    <i class="bi bi-geo-alt d-block mb-1"></i>
                                    @(string.IsNullOrEmpty(program.Location) ? "Virtual" : program.Location)
                                </div>
                            </div>

                            <div class="d-flex justify-content-between align-items-center">
                                <span class="badge @GetStatusBadgeClass(program.Status) px-3 py-2">@program.Status</span>
                                <span class="badge @GetTypeBadgeClass(program.ProgramType) px-2 py-1">@program.ProgramType</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        <div class="d-flex justify-content-between align-items-center mt-4">
            <div class="text-muted">
                Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalItems) of @totalItems programs
            </div>
            <nav>
                <ul class="pagination mb-0">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                    </li>
                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                    {
                        <li class="page-item @(currentPage == i ? "active" : "")">
                            <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                        </li>
                    }
                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                    </li>
                </ul>
            </nav>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <div class="text-muted">
                <i class="bi bi-heart fs-1 d-block mb-3"></i>
                <h5>No wellness programs found</h5>
                <p>No programs match your current filters.</p>
                <button class="btn btn-primary" @onclick="OpenCreateModal">
                    <i class="bi bi-plus-circle me-2"></i>Create First Program
                </button>
            </div>
        </div>
    }
</div>

<!-- Create/Edit Modal -->
<div class="modal fade @(showModal ? "show d-block" : "")" tabindex="-1" style="@(showModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-heart me-2"></i>
                    @(isEditMode ? "Edit Wellness Program" : "Create New Wellness Program")
                </h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <form @onsubmit="SaveProgram" @onsubmit:preventDefault="true">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label class="form-label">Program Name</label>
                                <input type="text" class="form-control" @bind="currentProgram.ProgramName" required />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Program Type</label>
                                <select class="form-select" @bind="currentProgram.ProgramType" required>
                                    <option value="">Select Type</option>
                                    <option value="Workshop">Workshop</option>
                                    <option value="Program">Program</option>
                                    <option value="Challenge">Challenge</option>
                                    <option value="Seminar">Seminar</option>
                                    <option value="Resource">Resource</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Category</label>
                                <select class="form-select" @bind="currentProgram.Category" required>
                                    <option value="">Select Category</option>
                                    <option value="Mental Health">Mental Health</option>
                                    <option value="Physical Fitness">Physical Fitness</option>
                                    <option value="Nutrition">Nutrition</option>
                                    <option value="Stress Management">Stress Management</option>
                                    <option value="Work-Life Balance">Work-Life Balance</option>
                                    <option value="Preventive Care">Preventive Care</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Status</label>
                                <select class="form-select" @bind="currentProgram.Status">
                                    <option value="Upcoming">Upcoming</option>
                                    <option value="Active">Active</option>
                                    <option value="Completed">Completed</option>
                                    <option value="Cancelled">Cancelled</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Start Date</label>
                                <input type="date" class="form-control" @bind="currentProgram.StartDate" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">End Date</label>
                                <input type="date" class="form-control" @bind="currentProgram.EndDate" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Duration</label>
                                <input type="text" class="form-control" @bind="currentProgram.Duration" placeholder="e.g., 8 weeks, 2 hours" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Location</label>
                                <input type="text" class="form-control" @bind="currentProgram.Location" placeholder="Leave empty for virtual" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Max Participants</label>
                                <input type="number" class="form-control" @bind="currentProgram.MaxParticipants" min="1" />
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" rows="4" @bind="currentProgram.Description" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Benefits</label>
                        <textarea class="form-control" rows="3" @bind="currentProgram.Benefits"></textarea>
                    </div>
                    <div class="text-end">
                        <button type="button" class="btn btn-secondary me-2" @onclick="CloseModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-check-circle me-2"></i>
                            @(isEditMode ? "Update" : "Create") Program
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@code {
    private List<WellnessProgramResponse> programs = new();
    private List<WellnessProgramResponse> pagedPrograms = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditMode = false;
    private string searchQuery = "";
    private string selectedCategory = "";
    private string selectedStatus = "";
    private string selectedType = "";
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 9; // 3x3 grid
    private int totalPages = 1;
    private int totalItems = 0;
    
    // Stats
    private int totalPrograms = 0;
    private int activePrograms = 0;
    private int totalParticipants = 0;
    private decimal participationRate = 0;
    
    private WellnessProgramRequest currentProgram = new();
    private int editingId = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            var query = $"/api/wellnessprograms?page={currentPage}&pageSize={pageSize}";
            if (!string.IsNullOrEmpty(searchQuery))
                query += $"&q={Uri.EscapeDataString(searchQuery)}";
            if (!string.IsNullOrEmpty(selectedCategory))
                query += $"&category={Uri.EscapeDataString(selectedCategory)}";
            if (!string.IsNullOrEmpty(selectedStatus))
                query += $"&status={Uri.EscapeDataString(selectedStatus)}";
            if (!string.IsNullOrEmpty(selectedType))
                query += $"&type={Uri.EscapeDataString(selectedType)}";

            var response = await Http.GetFromJsonAsync<WellnessProgramListResponse>(query);
            programs = response?.Items ?? new();
            totalItems = response?.Total ?? 0;
            totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
            
            UpdatePagedData();
            CalculateStats();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading wellness programs: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void UpdatePagedData()
    {
        pagedPrograms = programs.ToList();
    }

    private void CalculateStats()
    {
        totalPrograms = programs.Count;
        activePrograms = programs.Count(p => p.Status == "Active");
        totalParticipants = programs.Sum(p => p.ParticipantCount);
        var totalCapacity = programs.Sum(p => p.MaxParticipants);
        participationRate = totalCapacity > 0 ? (decimal)totalParticipants / totalCapacity : 0;
    }

    private async Task OnSearchChanged()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task OnFilterChanged()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadData();
        }
    }

    private void OpenCreateModal()
    {
        currentProgram = new WellnessProgramRequest { Status = "Upcoming", MaxParticipants = 50 };
        editingId = 0;
        isEditMode = false;
        showModal = true;
    }

    private void EditProgram(WellnessProgramResponse program)
    {
        currentProgram = new WellnessProgramRequest
        {
            ProgramName = program.ProgramName,
            Description = program.Description,
            Category = program.Category,
            ProgramType = program.ProgramType,
            Status = program.Status,
            StartDate = program.StartDate,
            EndDate = program.EndDate,
            Duration = program.Duration,
            Location = program.Location,
            MaxParticipants = program.MaxParticipants,
            Benefits = program.Benefits
        };
        editingId = program.WellnessProgram_ID;
        isEditMode = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentProgram = new WellnessProgramRequest();
        editingId = 0;
    }

    private async Task SaveProgram()
    {
        try
        {
            if (isEditMode)
            {
                await Http.PutAsJsonAsync($"/api/wellnessprograms/{editingId}", currentProgram);
                await JSRuntime.InvokeVoidAsync("alert", "Wellness program updated successfully!");
            }
            else
            {
                await Http.PostAsJsonAsync("/api/wellnessprograms", currentProgram);
                await JSRuntime.InvokeVoidAsync("alert", "Wellness program created successfully!");
            }
            
            CloseModal();
            await LoadData();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving wellness program: {ex.Message}");
        }
    }

    private async Task DeleteProgram(WellnessProgramResponse program)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the program '{program.ProgramName}'?"))
        {
            try
            {
                await Http.DeleteAsync($"/api/wellnessprograms/{program.WellnessProgram_ID}");
                await JSRuntime.InvokeVoidAsync("alert", "Wellness program deleted successfully!");
                await LoadData();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting wellness program: {ex.Message}");
            }
        }
    }

    private async Task ViewParticipants(WellnessProgramResponse program)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Participants for {program.ProgramName}:\n\nCurrent: {program.ParticipantCount}\nMax: {program.MaxParticipants}\n\nParticipant management feature coming soon!");
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Active" => "bg-success bg-opacity-10 text-success",
            "Upcoming" => "bg-info bg-opacity-10 text-info",
            "Completed" => "bg-primary bg-opacity-10 text-primary",
            "Cancelled" => "bg-danger bg-opacity-10 text-danger",
            _ => "bg-light text-dark"
        };
    }

    private string GetCategoryBadgeClass(string category)
    {
        return category switch
        {
            "Mental Health" => "bg-purple bg-opacity-10 text-purple",
            "Physical Fitness" => "bg-success bg-opacity-10 text-success",
            "Nutrition" => "bg-warning bg-opacity-10 text-warning",
            "Stress Management" => "bg-info bg-opacity-10 text-info",
            "Work-Life Balance" => "bg-primary bg-opacity-10 text-primary",
            "Preventive Care" => "bg-danger bg-opacity-10 text-danger",
            _ => "bg-light text-dark"
        };
    }

    private string GetTypeBadgeClass(string type)
    {
        return "bg-secondary bg-opacity-10 text-secondary";
    }
}
