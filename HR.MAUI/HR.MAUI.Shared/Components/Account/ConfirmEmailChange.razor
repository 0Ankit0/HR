@page "/account/confirm-email-change"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

<h1>Confirm email change</h1>

@if (!isAuthenticated)
{
    <p>You must be logged in to confirm your email change.</p>
}
else
{
    @if (isLoading)
    {
        <p>Loading...</p>
    }
    else if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert alert-info">@statusMessage</div>
    }
}

@code {
    [Parameter, SupplyParameterFromQuery]
    public string? UserId { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public string? Email { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public string? Code { get; set; }

    private string? statusMessage;
    private bool isLoading = true;
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsAuthenticatedAsync();

        if (!isAuthenticated)
        {
            return;
        }

        if (string.IsNullOrEmpty(UserId) ||
            string.IsNullOrEmpty(Email) ||
            string.IsNullOrEmpty(Code))
        {
            NavigationManager.NavigateTo("/", forceLoad: true);
            return;
        }

        try
        {
            var decodedCode = DecodeBase64Url(Code);
            var response = await Http.PostAsJsonAsync($"api/user/confirm-email-change", new
            {
                UserId,
                Email,
                Code = decodedCode
            });
            if (response.IsSuccessStatusCode)
            {
                statusMessage = "Thank you for confirming your email change.";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                statusMessage = $"Error: {error}";
            }
        }
        catch
        {
            statusMessage = "Invalid confirmation link.";
        }
        isLoading = false;
    }

    private static string DecodeBase64Url(string input)
    {
        string s = input.Replace('-', '+').Replace('_', '/');
        switch (s.Length % 4)
        {
            case 2: s += "=="; break;
            case 3: s += "="; break;
        }
        var bytes = Convert.FromBase64String(s);
        return System.Text.Encoding.UTF8.GetString(bytes);
    }
}