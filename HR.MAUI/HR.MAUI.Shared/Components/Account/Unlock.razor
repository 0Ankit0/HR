@page "/account/unlock"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@using System.Text
@using Microsoft.AspNetCore.WebUtilities

<h1>Unlock Your Account</h1>
<p>
    The system is processing your unlock request.
</p>

@if (!isAuthenticated)
{
    <p>You must be logged in to unlock your account.</p>
}
else
{
    @if (!string.IsNullOrEmpty(Message))
    {
        <div>@Message</div>
    }

    @if (!HasParams && !IsLoading)
    {
        <div class="alert alert-warning">Invalid unlock link. Please check your email and use the link provided.</div>
    }
}

@code {
    private string? Message;
    private bool IsLoading = false;
    private bool isAuthenticated = false;

    [SupplyParameterFromQuery]
    public string? Email { get; set; }

    [SupplyParameterFromQuery(Name = "code")]
    public string? EncodedCode { get; set; }

    private string? DecodedCode { get; set; }

    private bool HasParams => !string.IsNullOrWhiteSpace(Email) && !string.IsNullOrWhiteSpace(EncodedCode);

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (HasParams)
        {
            try
            {
                var codeBytes = WebEncoders.Base64UrlDecode(EncodedCode!);
                DecodedCode = Encoding.UTF8.GetString(codeBytes);
            }
            catch
            {
                DecodedCode = null;
            }

            if (!string.IsNullOrEmpty(DecodedCode))
            {
                await RemoveLockout();
            }
            else
            {
                Message = "Invalid unlock code format.";
            }
        }
    }

    private async Task RemoveLockout()
    {
        IsLoading = true;
        Message = string.Empty;
        try
        {
            var response = await Http.PostAsJsonAsync("/api/account/unlock", new { Email, Code = DecodedCode });
            if (response.IsSuccessStatusCode)
            {
                Message = "Lockout removed. You may now try logging in again.";
            }
            else
            {
                Message = await response.Content.ReadAsStringAsync();
            }
        }
        catch
        {
            Message = "An error occurred while attempting to remove lockout.";
        }
        finally
        {
            IsLoading = false;
        }
    }
}