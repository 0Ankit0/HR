@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="mb-3 d-flex align-items-center">
    <div class="flex-grow-1 position-relative">
        <span class="form-control-plaintext text-body">
            Permanently delete your account and all associated data.
        </span>
    </div>
    <button type="button" class="btn btn-outline-danger ms-2" @onclick="ShowPasswordInput">
        Delete
    </button>
</div>

@if (showPasswordInput)
{
    <div class="alert alert-warning" role="alert">
        <p>
            <strong>Deleting this data will permanently remove your account, and this cannot be recovered.</strong>
        </p>
    </div>
    <EditForm Model="inputModel" OnValidSubmit="DeletePersonalDataHandler">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @if (requirePassword)
        {
            <div class="form-floating mb-3">
                <InputText @bind-Value="inputModel.Password" class="form-control" type="password" autocomplete="current-password" placeholder="Please enter your password." />
                <label>Password</label>
            </div>
        }
        <button class="w-100 btn btn-danger" type="submit">Confirm Delete</button>
    </EditForm>
}

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info mt-2">@statusMessage</div>
}

<style>
    .material-symbols-outlined {
        font-family: 'Material Symbols Outlined', sans-serif;
        font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 24;
        vertical-align: middle;
    }
</style>

@code {
    private InputModel inputModel = new();
    private string? statusMessage;
    private bool requirePassword;
    private bool showPasswordInput;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync("api/user/has-password");
        if (response.IsSuccessStatusCode)
        {
            requirePassword = bool.Parse(await response.Content.ReadAsStringAsync());
        }
        else
        {
            statusMessage = "Unable to determine password status.";
        }
    }

    private async Task ShowPasswordInput()
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete your account? This action cannot be undone.");
        if (confirmed)
        {
            showPasswordInput = true;
        }
    }

    private async Task DeletePersonalDataHandler()
    {
        var response = await Http.PostAsJsonAsync("/api/account/deletepersonaldata", inputModel);
        if (response.IsSuccessStatusCode)
        {
            statusMessage = "Personal data deleted.";
            NavigationManager.NavigateTo("/");
        }
        else
        {
            statusMessage = await response.Content.ReadAsStringAsync();
        }
    }

    public class InputModel
    {
        [Required(ErrorMessage = "Password is required.")]
        [DataType(DataType.Password)]
        public string? Password { get; set; }
    }
}