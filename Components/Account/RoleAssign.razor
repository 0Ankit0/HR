@page "/account/roles/assign/{RoleId}"
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles ="Admin")]

@code {
    [Parameter] public string RoleId { get; set; } = string.Empty;
    private RoleDto? role;
    private string? statusMessage;
    private List<UserDto> usersInRole = new();
    private AssignUserModel assignUserModel = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadRoleAndUsers();
    }

    private async Task LoadRoleAndUsers()
    {
        role = await Http.GetFromJsonAsync<RoleDto>($"/api/roles/{RoleId}");
        if (role != null)
        {
            usersInRole = await Http.GetFromJsonAsync<List<UserDto>>($"/api/roles/{RoleId}/users") ?? new();
        }
    }

    private async Task AssignUser()
    {
        if (role == null) return;
        var response = await Http.PostAsJsonAsync($"/api/roles/assign", new RoleAssignModel { UserEmail = assignUserModel.UserEmail, RoleId = RoleId });
        if (response.IsSuccessStatusCode)
        {
            statusMessage = $"User '{assignUserModel.UserEmail}' assigned to role '{role.Name}'.";
            await LoadRoleAndUsers();
            assignUserModel.UserEmail = string.Empty;
        }
        else
        {
            statusMessage = await response.Content.ReadAsStringAsync();
        }
    }

    private async Task RemoveUser(string userId)
    {
        if (role == null) return;
        var response = await Http.PostAsJsonAsync($"/api/roles/remove", new RoleAssignModel { UserId = userId, RoleId = RoleId });
        if (response.IsSuccessStatusCode)
        {
            statusMessage = $"User removed from role.";
            await LoadRoleAndUsers();
        }
        else
        {
            statusMessage = await response.Content.ReadAsStringAsync();
        }
    }

    public class AssignUserModel
    {
        [Required(ErrorMessage = "User email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string UserEmail { get; set; } = string.Empty;
    }
    public class RoleDto
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
    }
    public class UserDto
    {
        public string Id { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
    }
    public class RoleAssignModel
    {
        public string? UserId { get; set; }
        public string? UserEmail { get; set; }
        public string? RoleId { get; set; }
    }
}

<h1>Assign Users to Role</h1>
@if (role == null)
{
    <div class="alert alert-danger">Role not found.</div>
}
else
{
    <h3>Role: @role.Name</h3>
    <EditForm Model="assignUserModel" OnValidSubmit="AssignUser">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputText @bind-Value="assignUserModel.UserEmail" class="form-control mb-2" placeholder="User email" />
        <button class="btn btn-success" type="submit">Assign</button>
        <a class="btn btn-secondary ms-2" href="/account/roles">Back</a>
    </EditForm>
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert alert-info mt-2">@statusMessage</div>
    }
    <h4 class="mt-4">Users in this role</h4>
    <ul class="list-group">
        @foreach (var user in usersInRole)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>@user.Email</span>
                <button class="btn btn-danger btn-sm" @onclick="() => RemoveUser(user.Id)">Remove</button>
            </li>
        }
    </ul>
}