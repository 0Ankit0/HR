@using System.Diagnostics
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider

<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred while processing your request.</h2>

@if (ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@RequestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
</p>
<p>
    <strong>Development environment should not be enabled in deployed applications</strong>, as it can result in sensitive information from exceptions being displayed to end users. For local debugging, development environment can be enabled by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>, and restarting the application.
</p>

@code {
    private string? RequestId { get; set; }
    private bool ShowRequestId => !string.IsNullOrEmpty(RequestId);

    protected override void OnInitialized()
    {
        // Try to get the current Activity ID, fallback to a generated GUID if not available
        RequestId = Activity.Current?.Id;

        // Try to get HttpContext.TraceIdentifier if available (server-side Blazor)
        if (string.IsNullOrEmpty(RequestId))
        {
            var httpContextAccessor = ServiceProvider.GetService(typeof(Microsoft.AspNetCore.Http.IHttpContextAccessor)) as Microsoft.AspNetCore.Http.IHttpContextAccessor;
            RequestId = httpContextAccessor?.HttpContext?.TraceIdentifier;
        }

        // Fallback to a random GUID if nothing else is available
        if (string.IsNullOrEmpty(RequestId))
        {
            RequestId = Guid.NewGuid().ToString();
        }
    }
}