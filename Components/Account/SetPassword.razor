@page "/account/setpassword"
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize]

<h1>Set Password</h1>
@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info mt-2">@statusMessage</div>
}
@if (!hasPassword)
{
    <EditForm Model="setPasswordModel" OnValidSubmit="HandleSetPassword">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputText @bind-Value="setPasswordModel.NewPassword" class="form-control" type="password" placeholder="New password" />
        <InputText @bind-Value="setPasswordModel.ConfirmPassword" class="form-control" type="password" placeholder="Confirm new password" />
        <button type="submit" class="w-100 btn btn-lg btn-primary">Set Password</button>
    </EditForm>
}
else
{
    <p>
        Click <a href="/account/manage">here</a> to manage your account settings.
    </p>
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private SetPasswordModel setPasswordModel = new SetPasswordModel();
    private string? statusMessage;
    private bool hasPassword = false;
    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask == null)
        {
            statusMessage = "Invalid authentication state.";
            return;
        }
        var authState = await authenticationStateTask;
        userId = authState.User.FindFirst(c => c.Type == "sub" || c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;
        if (string.IsNullOrEmpty(userId))
        {
            statusMessage = "User not found.";
            return;
        }
        hasPassword = await Http.GetFromJsonAsync<bool>($"/api/password/has/{userId}");
        if (hasPassword)
        {
            statusMessage = "You already have a password set.";
        }
    }

    private async Task HandleSetPassword()
    {
        statusMessage = string.Empty;
        if (setPasswordModel.NewPassword != setPasswordModel.ConfirmPassword)
        {
            statusMessage = "Passwords do not match.";
            return;
        }
        if (authenticationStateTask == null || string.IsNullOrEmpty(setPasswordModel.NewPassword) || string.IsNullOrEmpty(userId))
        {
            statusMessage = "Invalid state or password.";
            return;
        }
        var response = await Http.PostAsJsonAsync($"/api/password/set/{userId}", setPasswordModel);
        if (response.IsSuccessStatusCode)
        {
            statusMessage = "Password set successfully.";
            hasPassword = true;
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            statusMessage = $"Failed to set password: {error}";
        }
    }
    public class SetPasswordModel
    {
        [Required]
        [MinLength(6)]
        public string? NewPassword { get; set; }
        [Required]
        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match.")]
        public string? ConfirmPassword { get; set; }
    }
}