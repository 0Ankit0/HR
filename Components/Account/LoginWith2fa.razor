@page "/account/loginwith2fa"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>Two-factor authentication</h1>
<hr />
<p>Your login is protected with an authenticator app. Enter your authenticator code below.</p>
<EditForm Model="model" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputText @bind-Value="model.TwoFactorCode" class="form-control mb-3" placeholder="Authenticator code" />
    <InputCheckbox @bind-Value="model.RememberMachine" class="form-check-input" /> Remember this machine
    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
</EditForm>
<p>
    Don't have access to your authenticator device? You can
    <a href="@($"/account/loginwithrecoverycode?returnUrl={Uri.EscapeDataString(returnUrl ?? "/")}")">log in with a recovery code</a>.
</p>
@code {
    private TwoFactorModel model = new();
    private string? statusMessage;
    private string? returnUrl;
    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("returnUrl", out var value))
        {
            returnUrl = value;
        }
        else
        {
            returnUrl = "/";
        }
    }
    private async Task HandleLogin()
    {
        var response = await Http.PostAsJsonAsync("/api/account/loginwith2fa", new { model.TwoFactorCode, model.RememberMachine, ReturnUrl = returnUrl });
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo(returnUrl ?? "/");
        }
        else
        {
            statusMessage = await response.Content.ReadAsStringAsync();
        }
    }
    public class TwoFactorModel
    {
        [Required]
        public string TwoFactorCode { get; set; } = string.Empty;
        public bool RememberMachine { get; set; }
    }
}